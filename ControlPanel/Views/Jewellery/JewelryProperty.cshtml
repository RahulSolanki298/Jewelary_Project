@model IEnumerable<Models.ProductPropertyDTO>
@{
    ViewData["Title"] = "Jewelry Master";

    var index = 1;
}

<section class="section dashboard">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="h4"><b>Jewellery Parameter Master</b></h2>
        <a class="btn btn-theme" href="@Url.Action("UpsertProductProperty", "Jewellery")">
            <i class="bi bi-plus-circle me-1"></i>
            Add New
        </a>
    </div>
    <div class="row">
        <div class="col-6">
            <div class="card recent-sales overflow-auto">

                <div class="filter">
                    <a class="icon" href="#" data-bs-toggle="dropdown"><i class="bi bi-three-dots"></i></a>
                    @*<ul class="dropdown-menu dropdown-menu-end dropdown-menu-arrow">
                        <li class="dropdown-header text-start">
                            <h6>Filter</h6>
                        </li>

                        <li><a class="dropdown-item" href="#">Today</a></li>
                        <li><a class="dropdown-item" href="#">This Month</a></li>
                        <li><a class="dropdown-item" href="#">This Year</a></li>
                    </ul>*@
                </div>
                <div class="card-body">
                    <h5 class="card-title">Main Properties</h5>
                    <table class="table table-borderless mb-0" id="diamondProperty">
                        <thead class="table-light text-center">
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Name</th>
                                <th scope="col">Status</th>
                                <th scope="col">Action</th>
                            </tr>
                        </thead>
                        <tbody class="text-center">
                            @if (Model != null && Model.Any(x => x.ParentId == null))
                            {
                                foreach (var item in Model.Where(x => x.ParentId == null))
                                {
                                    <tr class="clickable-row" propertyName="@item.Name">
                                        <td>
                                            @(index++)
                                        </td>
                                        <td>@item.Name</td>
                                        <td>
                                            @if (item.IsActive)
                                            {
                                                <span class="badge bg-success">Active</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Draft</span>
                                            }
                                        </td>
                                        <td>
                                            <div class="dropdown">
                                                <a class="" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="bi bi-three-dots-vertical"></i>
                                                </a>
                                                <ul class="dropdown-menu">
                                                    <li>
                                                        <a class="dropdown-item" href="@Url.Action("UpsertProductProperty", "Jewellery", new { pId = item.Id })">
                                                            <i class="bi bi-pencil-square me-1"></i>Edit
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item text-danger" href="@Url.Action("DeleteProductProperty", "Jewellery", new { pId = item.Id })">
                                                            <i class="bi bi-trash me-1"></i>
                                                            Delete
                                                        </a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="4" class="text-center text-muted">No properties found.</td>
                                </tr>
                            }
                        </tbody>
                    </table>

                </div>

            </div>

        </div>
        <div class="col-6">
            <div class="card recent-sales overflow-auto" id="propertyDT">
            </div>
        </div>
    </div>
</section>


@section Scripts {
    <script>
            $(document).ready(function () {
                $('.clickable-row').on('click', function () {
                var propertyName = $(this).attr('propertyname'); // Ensure correct casing in data attribute

                $.ajax({
                    url: '@Url.Action("JewelryPropertyItems", "Jewellery")' + '?propertyName=' + encodeURIComponent(propertyName),
                    method: 'GET',
                    contentType: 'application/json',
                    success: function (data) {
                        $("#propertyDT").empty().html(data); // Clear and update content
                    },
                    error: function (xhr, status, error) {
                        console.error('API call failed:', error);
                    }
                });




                });

                $("#propertyDT").on("click", "#btnEdit", function () {
                    $(".txtProp").prop("disabled", false);
                    $("#btnEdit").attr("style", "display:none");

                    $("#btnUpdate").removeAttr("style");
                });

                $("#propertyDT").on("click", "#btnUpdate", function () {
                     let properties = [];

                    $('#diamondPropertyItems tbody tr').each(function () {
                        let $row = $(this);
                        let id = $row.find('.id').val();
                        let parentId = $row.find('.parentid').val();
                        let name = $row.find('.propName').val();
                        let symbolName = $row.find('.symbolName').val();
                        let isActive = $row.find('input[type="checkbox"]').is(':checked');
                        let synonyms = $row.find('.synonyms').val();
                        let iconPath = $row.find('.iconPath').val();
                        let dispOrder = $row.find('.dispOrder').val();

                        // You may need to get ID too (add a hidden input or data attribute if it's not already available)
                        //let id = $row.data("id");

                        properties.push({
                            Id: id, // optional, if you want to support updating
                            Name: name,
                            SymbolName: symbolName,
                            IsActive: isActive,
                            Synonyms: synonyms,
                            IconPath: iconPath,
                            DisplayOrder: dispOrder,
                            ParentId:parentId
                        });
                    });

                // Optional: Validate before sending
                if (properties.length === 0) {
                    alert("No data to save.");
                    return;
                }

                    $.ajax({
                    url: '@Url.Action("SaveBulkProductProperty", "Jewellery")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(properties),
                    success: function (res) {
                        Swal.fire({
                            title: res.message,
                            icon: "success",
                            draggable: true
                        });
                        location.reload();
                    },
                    error: function (xhr, status, error) {
                        console.error(error);
                        Swal.fire({
                            title: error.message,
                            icon: "fail",
                            draggable: true
                        });
                        location.reload();
                    }
                });

                    $(".txtProp").prop("disabled", true);
                    $("#btnEdit").removeAttr("style");

                    $("#btnUpdate").attr("style", "display:none");
                });
        });

    </script>

}
