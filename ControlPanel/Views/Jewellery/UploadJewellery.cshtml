@using Common

<div class="container mt-5" id="uploadWrapper">
    <div class="card shadow-lg p-4">
        <h2 class="mb-3 text-primary">Upload Product File</h2>

        @if (TempData["UploadSuccess"] != null)
        {
            <div class="alert alert-success">@TempData["UploadSuccess"]</div>
        }
        @if (TempData["UploadError"] != null)
        {
            <div class="alert alert-danger">@TempData["UploadError"]</div>
        }

        <form id="uploadForm" asp-controller="Jewellery" asp-action="ExcelUpload" method="post" enctype="multipart/form-data">
            <div class="mb-4">
                <label for="excelFile" class="form-label fw-bold">Select Excel or CSV File</label>
                <input type="file" class="form-control form-control-lg" id="excelFile" name="file" accept=".xls,.xlsx,.csv" required>
            </div>

            <div id="loader-overlay" class="text-center mt-4" style="display:none;">
                <img src="~/assets/loader/JF-WEB-LOADER.gif" style="width:100px;" alt="Loading..." />
            </div>

            <button id="uploadBtn" type="submit" class="btn btn-primary w-100">Upload File</button>
        </form>
    </div>

    

    <div id="ImportProductList" class="mt-4">
        <!-- Loaded Product List Will Appear Here -->
    </div>
</div>


@section Scripts
{
    <script>

        $(document).ready(function () {

            $('#uploadForm').on('submit', function (e) {
                e.preventDefault();

                let form = $(this)[0];
                let formData = new FormData(form);

                $('#uploadBtn').prop('disabled', true).text('Uploading...');
                showLoader();

                $.ajax({
                    url: form.action,
                    type: 'POST',
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        hideLoader();
                        $('#uploadBtn').prop('disabled', false).text('Upload');
                        alert(response.message || 'Product File Uploaded Successfully.');
                        $("#ImportProductList").html("");
                        $("#ImportProductList").html(response);

                    },
                    error: function (xhr, status, error) {
                        $('#loader').hide();
                        $('#uploadBtn').prop('disabled', false).text('Upload');
                        alert('Upload failed: ' + xhr.responseText);
                    }
                });
            });

            $("#ImportProductList").on("click", "#ringList #btnSaveRings", function () {
                var productDTO = [];

                $('#ringTable tbody tr').each(function () {
                    let row = $(this);

                    // Skip empty row (like "No data found")
                    if (row.find('input, textarea').length === 0) return;

                    let product = {
                        Title: row.find('input[name="Title"]').val(),
                        Sku: row.find('input[name="Sku"]').val(),
                        CategoryName: row.find('input[name="CategoryName"]').val(),
                        VenderName: row.find('input[name="VenderName"]').val(),
                        VenderStyle: row.find('input[name="VenderStyle"]').val(),
                        Length: row.find('input[name="Length"]').val(),
                        BandWidth: row.find('input[name="BandWidth"]').val(),
                        GoldWeight: row.find('input[name="GoldWeight"]').val(),
                        CTW: row.find('input[name="CTW"]').val(),
                        CenterShapeName: row.find('input[name="CenterShapeName"]').val(),
                        CenterCaratName: row.find('input[name="CenterCaratName"]').val(),
                        Certificate: row.find('input[name="Certificate"]').val(),
                        ColorName: row.find('input[name="ColorName"]').val(),
                        AccentStoneShapeName: row.find('input[name="AccentStoneShapeName"]').val(),
                        MMSize: row.find('input[name="MMSize"]').val(),
                        DiaWT: row.find('input[name="DiaWT"]').val(),
                        NoOfStones: row.find('input[name="NoOfStones"]').val(),
                        Grades: row.find('input[name="Grades"]').val(),
                        ProductType: row.find('input[name="ProductType"]').val(),
                        Price: row.find('input[name="Price"]').val(),
                        WholesaleCost: row.find('input[name="WholesaleCost"]').val(),
                        Karat: row.find('input[name="Karat"]').val(),
                        Description: row.find('textarea[name="Description"]').val()
                    };

                    productDTO.push(product);
                });
                var formData = new FormData();
                formData.append("productsJson", JSON.stringify(productDTO));

                // Send AJAX request
                $.ajax({
                    url: '@Url.Action("SaveAllProduct", "Jewellery")',
                    type: 'POST',
                    processData: false,
                    contentType: false,
                    data: formData,
                    success: function (response) {
                        alert('Product Rings Saved Successfully!');
                    },
                    error: function (xhr, status, error) {
                        console.error("Error:", error);
                        alert('Error saving data. See console for details.');
                    }
                });
            });


            $("#ImportProductList").on("click", "#bandList #btnSaveBands", function () {
                var productDTO = [];

                $('#bandTable tbody tr').each(function () {
                    let row = $(this);

                    // Skip empty row (like "No data found")
                    if (row.find('input, textarea').length === 0) return;

                    let product = {
                        Title: row.find('input[name="Title"]').val(),
                        Sku: row.find('input[name="Sku"]').val(),
                        CategoryName: row.find('input[name="CategoryName"]').val(),
                        VenderName: row.find('input[name="VenderName"]').val(),
                        VenderStyle: row.find('input[name="VenderStyle"]').val(),
                        Length: row.find('input[name="Length"]').val(),
                        BandWidth: row.find('input[name="BandWidth"]').val(),
                        GoldWeight: row.find('input[name="GoldWeight"]').val(),
                        CTW: row.find('input[name="CTW"]').val(),
                        CenterShapeName: row.find('input[name="CenterShapeName"]').val(),
                        CenterCaratName: row.find('input[name="CenterCaratName"]').val(),
                        Certificate: row.find('input[name="Certificate"]').val(),
                        ColorName: row.find('input[name="ColorName"]').val(),
                        AccentStoneShapeName: row.find('input[name="AccentStoneShapeName"]').val(),
                        MMSize: row.find('input[name="MMSize"]').val(),
                        DiaWT: row.find('input[name="DiaWT"]').val(),
                        NoOfStones: row.find('input[name="NoOfStones"]').val(),
                        Grades: row.find('input[name="Grades"]').val(),
                        ProductType: row.find('input[name="ProductType"]').val(),
                        Price: row.find('input[name="Price"]').val(),
                        WholesaleCost: row.find('input[name="WholesaleCost"]').val(),
                        Karat: row.find('input[name="Karat"]').val(),
                        Description: row.find('textarea[name="Description"]').val()
                    };

                    productDTO.push(product);
                });
                var formData = new FormData();
                formData.append("productsJson", JSON.stringify(productDTO));

                // Send AJAX request
                $.ajax({
                    url: '@Url.Action("SaveAllProduct", "Jewellery")',
                    type: 'POST',
                    processData: false,
                    contentType: false,
                    data: formData,
                    success: function (response) {
                        alert('Product Bands Saved Successfully');
                    },
                    error: function (xhr, status, error) {
                        console.error("Error:", error);
                        alert('Error saving data. See console for details.');
                    }
                });
            });


            $("#ImportProductList").on("click", "#earringList #btnSaveEarring", function () {
                var productDTO = [];

                $('#EarringTable tbody tr').each(function () {
                    let row = $(this);

                    // Skip empty row (like "No data found")
                    if (row.find('input, textarea').length === 0) return;

                    let product = {
                        Title: row.find('input[name="Title"]').val(),
                        Sku: row.find('input[name="Sku"]').val(),
                        CategoryName: row.find('input[name="CategoryName"]').val(),
                        VenderName: row.find('input[name="VenderName"]').val(),
                        VenderStyle: row.find('input[name="VenderStyle"]').val(),
                        Length: row.find('input[name="Length"]').val(),
                        BandWidth: row.find('input[name="BandWidth"]').val(),
                        GoldWeight: row.find('input[name="GoldWeight"]').val(),
                        CTW: row.find('input[name="CTW"]').val(),
                        CenterShapeName: row.find('input[name="CenterShapeName"]').val(),
                        CenterCaratName: row.find('input[name="CenterCaratName"]').val(),
                        Certificate: row.find('input[name="Certificate"]').val(),
                        ColorName: row.find('input[name="ColorName"]').val(),
                        AccentStoneShapeName: row.find('input[name="AccentStoneShapeName"]').val(),
                        MMSize: row.find('input[name="MMSize"]').val(),
                        DiaWT: row.find('input[name="DiaWT"]').val(),
                        NoOfStones: row.find('input[name="NoOfStones"]').val(),
                        Grades: row.find('input[name="Grades"]').val(),
                        ProductType: row.find('input[name="ProductType"]').val(),
                        Price: row.find('input[name="Price"]').val(),
                        WholesaleCost: row.find('input[name="WholesaleCost"]').val(),
                        Karat: row.find('input[name="Karat"]').val(),
                        Description: row.find('textarea[name="Description"]').val()
                    };

                    productDTO.push(product);
                });
                var formData = new FormData();
                formData.append("productsJson", JSON.stringify(productDTO));

                // Send AJAX request
                $.ajax({
                    url: '@Url.Action("SaveAllProduct", "Jewellery")',
                    type: 'POST',
                    processData: false,
                    contentType: false,
                    data: formData,
                    success: function (response) {
                        alert('Product Earrings Saved Successfully');
                    },
                    error: function (xhr, status, error) {
                        console.error("Error:", error);
                        alert('Error saving data. See console for details.');
                    }
                });
            });


            $("#ImportProductList").on("click", "#pendantList #btnSavePendant", function () {
                var productDTO = [];

                $('#PendantTable tbody tr').each(function () {
                    let row = $(this);

                    // Skip empty row (like "No data found")
                    if (row.find('input, textarea').length === 0) return;

                    let product = {
                        Title: row.find('input[name="Title"]').val(),
                        Sku: row.find('input[name="Sku"]').val(),
                        CategoryName: row.find('input[name="CategoryName"]').val(),
                        VenderName: row.find('input[name="VenderName"]').val(),
                        VenderStyle: row.find('input[name="VenderStyle"]').val(),
                        Length: row.find('input[name="Length"]').val(),
                        BandWidth: row.find('input[name="BandWidth"]').val(),
                        GoldWeight: row.find('input[name="GoldWeight"]').val(),
                        CTW: row.find('input[name="CTW"]').val(),
                        CenterShapeName: row.find('input[name="CenterShapeName"]').val(),
                        CenterCaratName: row.find('input[name="CenterCaratName"]').val(),
                        Certificate: row.find('input[name="Certificate"]').val(),
                        ColorName: row.find('input[name="ColorName"]').val(),
                        AccentStoneShapeName: row.find('input[name="AccentStoneShapeName"]').val(),
                        MMSize: row.find('input[name="MMSize"]').val(),
                        DiaWT: row.find('input[name="DiaWT"]').val(),
                        NoOfStones: row.find('input[name="NoOfStones"]').val(),
                        Grades: row.find('input[name="Grades"]').val(),
                        ProductType: row.find('input[name="ProductType"]').val(),
                        Price: row.find('input[name="Price"]').val(),
                        WholesaleCost: row.find('input[name="WholesaleCost"]').val(),
                        Karat: row.find('input[name="Karat"]').val(),
                        Description: row.find('textarea[name="Description"]').val()
                    };

                    productDTO.push(product);
                });
                var formData = new FormData();
                formData.append("productsJson", JSON.stringify(productDTO));

                // Send AJAX request
                $.ajax({
                    url: '@Url.Action("SaveAllProduct", "Jewellery")',
                    type: 'POST',
                    processData: false,
                    contentType: false,
                    data: formData,
                    success: function (response) {
                        alert('Product Pendant Saved Successfully');
                    },
                    error: function (xhr, status, error) {
                        console.error("Error:", error);
                        alert('Error saving data. See console for details.');
                    }
                });
            });

            $("#ImportProductList").on("click", "#braceletsList #btnSaveBracelets", function () {
                var productDTO = [];

                $('#BraceletsTable tbody tr').each(function () {
                    let row = $(this);

                    // Skip empty row (like "No data found")
                    if (row.find('input, textarea').length === 0) return;

                    let product = {
                        Title: row.find('input[name="Title"]').val(),
                        Sku: row.find('input[name="Sku"]').val(),
                        CategoryName: row.find('input[name="CategoryName"]').val(),
                        VenderName: row.find('input[name="VenderName"]').val(),
                        VenderStyle: row.find('input[name="VenderStyle"]').val(),
                        Length: row.find('input[name="Length"]').val(),
                        BandWidth: row.find('input[name="BandWidth"]').val(),
                        GoldWeight: row.find('input[name="GoldWeight"]').val(),
                        CTW: row.find('input[name="CTW"]').val(),
                        CenterShapeName: row.find('input[name="CenterShapeName"]').val(),
                        CenterCaratName: row.find('input[name="CenterCaratName"]').val(),
                        Certificate: row.find('input[name="Certificate"]').val(),
                        ColorName: row.find('input[name="ColorName"]').val(),
                        AccentStoneShapeName: row.find('input[name="AccentStoneShapeName"]').val(),
                        MMSize: row.find('input[name="MMSize"]').val(),
                        DiaWT: row.find('input[name="DiaWT"]').val(),
                        NoOfStones: row.find('input[name="NoOfStones"]').val(),
                        Grades: row.find('input[name="Grades"]').val(),
                        ProductType: row.find('input[name="ProductType"]').val(),
                        Price: row.find('input[name="Price"]').val(),
                        WholesaleCost: row.find('input[name="WholesaleCost"]').val(),
                        Karat: row.find('input[name="Karat"]').val(),
                        Description: row.find('textarea[name="Description"]').val()
                    };

                    productDTO.push(product);
                });
                var formData = new FormData();
                formData.append("productsJson", JSON.stringify(productDTO));

                // Send AJAX request
                $.ajax({
                    url: '@Url.Action("SaveAllProduct", "Jewellery")',
                    type: 'POST',
                    processData: false,
                    contentType: false,
                    data: formData,
                    success: function (response) {
                        alert('Product Bracelets Saved Successfully');
                    },
                    error: function (xhr, status, error) {
                        console.error("Error:", error);
                        alert('Error saving data. See console for details.');
                    }
                });
            });


            $('#ImportProductList').on('change', "#chkFile", function () {
                $('#divZipDT').toggle(this.checked);
                if (this.checked) {
                    $('#chkFolder').prop('checked', false);
                    $('#divFolderDT').hide();
                }
            });

            $('#ImportProductList').on('change', "#chkFolder", function () {
                $('#divFolderDT').toggle(this.checked);
                if (this.checked) {
                    $('#chkFile').prop('checked', false);
                    $('#divZipDT').hide();
                }
            });

            // Optional: respond to #FileOption change if needed
            $('#ImportProductList').on('change', '#FileOption', function () {
                $('#chkFile, #chkFolder').prop('checked', false);
                $('#divZipDT, #divFolderDT').hide();
            });


            $('#ImportProductList').on("click", "#btnFileImgSave", function (e) {
                debugger;
                e.preventDefault();
                showLoader();
                var fileInput = $("#fileUpload")[0];
                if (!fileInput || fileInput.files.length === 0) {
                    alert("Please upload a valid .zip file.");
                    return;
                }

                var file = fileInput.files[0];

                if (file.type !== "application/zip" && !file.name.endsWith(".zip")) {
                    alert("Only .zip files are allowed.");
                    return;
                }

                var formData = new FormData();
                formData.append("zipFile", file);

                $.ajax({
                    url: "@Url.Action("UploadProductCollectionImages","Jewellery")", // Make sure this URL is correct
                    type: "POST",
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        $("#response").html("Product Images and Video Uploaded successful: " + response);
                        $("#_loaderDIV").hide();
                        hideLoader();
                    },
                    error: function (xhr, status, error) {
                        console.error("Upload error:", xhr.responseText);
                        $("#response").html("Upload failed: " + xhr.responseText);
                    }
                });
            });


            $('#ImportProductList').on("click", "#btnFolderImgSave", function (e) {
                e.preventDefault();

                var files = $('#folderInput')[0].files;
                if (files.length === 0) {
                    alert("Please select a folder.");
                    return;
                }

                var formData = new FormData();
                for (var i = 0; i < files.length; i++) {
                    formData.append("files", files[i]);
                }

                $.ajax({
                    url: '@Url.Action("UploadProductImagesFromFolder", "Jewellery")',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        $("#response").html("Upload successful: " + response);
                    },
                    error: function (xhr) {
                        $("#response").html("Upload failed: " + xhr.responseText);
                    }
                });
            });




            $("#ImportProductList").on("click", "#btnEditRings", function () {
                var isReadonly = $("#ringTable .product-input").first().prop("readonly");

                if (isReadonly) {
                    // Enable editing
                    $("#ringTable .product-input").removeAttr("readonly");
                    $(this).text("Save Rings");
                } else {
                    // Optionally handle save logic here

                    // Make fields readonly again
                    $("#ringTable .product-input").attr("readonly", true);
                    $(this).text("Edit Rings");
                }
            });

            $("#ImportProductList").on("click", "#btnEditBands", function () {
                var isReadonly = $("#bandTable .product-input").first().prop("readonly");

                if (isReadonly) {
                    // Enable editing
                    $("#bandTable .product-input").removeAttr("readonly");
                    $(this).text("Save Bands");
                } else {
                    // Optionally handle save logic here

                    // Make fields readonly again
                    $("#bandTable .product-input").attr("readonly", true);
                    $(this).text("Edit Bands");
                }
            });


            $("#ImportProductList").on("click", "#btnEditEarring", function () {
                var isReadonly = $("#EarringTable .product-input").first().prop("readonly");

                if (isReadonly) {
                    // Enable editing
                    $("#EarringTable .product-input").removeAttr("readonly");
                    $(this).text("Save Earring");
                } else {
                    // Optionally handle save logic here

                    // Make fields readonly again
                    $("#EarringTable .product-input").attr("readonly", true);
                    $(this).text("Edit Earring");
                }
            });


            $("#ImportProductList").on("click", "#btnEditPendant", function () {
                var isReadonly = $("#PendantTable .product-input").first().prop("readonly");

                if (isReadonly) {
                    // Enable editing
                    $("#PendantTable .product-input").removeAttr("readonly");
                    $(this).text("Save Rings");
                } else {
                    // Optionally handle save logic here

                    // Make fields readonly again
                    $("#PendantTable .product-input").attr("readonly", true);
                    $(this).text("Edit Pendant");
                }
            });


            $("#ImportProductList").on("click", "#btnEditBracelets", function () {
                var isReadonly = $("#BraceletsTable .product-input").first().prop("readonly");

                if (isReadonly) {
                    // Enable editing
                    $("#BraceletsTable .product-input").removeAttr("readonly");
                    $(this).text("Save Bracelets");
                } else {
                    // Optionally handle save logic here

                    // Make fields readonly again
                    $("#BraceletsTable .product-input").attr("readonly", true);
                    $(this).text("Edit Bracelets");
                }
            });


        });


        function showLoader() {
            $('#loader-overlay').show();
        }

        function hideLoader() {
            $('#loader-overlay').hide();
        }

    </script>
}