@using Business.Repository.IRepository
@using Common
@using CsvHelper
@using DataAccess.Entities
@using MudBlazor
@using System.IO
@using Newtonsoft.Json
@using OfficeOpenXml
@using System.Globalization
@inject ISnackbar Snackbar
@inject IDiamondRepository _diamondRepository;
@inject IDiamondPropertyRepository _diamondPPTY;
@inject IJSRuntime JSRuntime

<MudDialog>
    <TitleContent>
        Add Products
    </TitleContent>
    <DialogContent>
        <InputFile OnChange="HandleFileSelected" />
        @*@if (isUploading == true)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }*@
        <MudToolBarSpacer />
        <p><span style="font-weight:bold">Note :</span></p>
        <p>Please upload diamond file.</p>
        <p>Download Excel Format : <MudButton Color="Color.Primary">Download</MudButton></p>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Error">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@if (showProgressBar)
{
<MudProgressLinear Color="Color.Info"
                   Size="Size.Large"
                   Value="@uploadProgress"
                   Class="my-7"
                   Rounded="true"
                   Striping="true"
                   BufferValue="100">
    <@ChildContent>
        <MudText Typo="Typo.subtitle2" Align="Align.Center">
            <b>@($"{uploadProgress:0}%")</b>
        </MudText>
    </@ChildContent>
</MudProgressLinear>

}





@code {
    private IBrowserFile selectedFile;
    private bool isUploading = false;
    List<Diamond> diamondsDTList = new();

    private double uploadProgress = 0;
    private bool showProgressBar = false;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            Snackbar.Add("No file selected.", Severity.Warning);
            return;
        }

        selectedFile = e.File;
        isUploading = true;
        showProgressBar = true;
        uploadProgress = 0;
        diamondsDTList.Clear();

        try
        {
            var format = Path.GetExtension(selectedFile.Name).ToLower();
            await using var stream = selectedFile.OpenReadStream(maxAllowedSize: 20 * 1024 * 1024); // 20MB max

            DiamondFileUploadHistory Data = new DiamondFileUploadHistory();
            Data.Title = $"Diamond Upload - {DateTime.Now}";
            Data.UploadedBy = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
            Data.UploadedDate = DateTime.Now;

            var diamondId = await _diamondRepository.AddDiamondFileUploadedHistory(Data);

            if (format == ".xlsx" || format == ".xls")
            {
                var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                memoryStream.Position = 0;

                ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
                using var package = new ExcelPackage(memoryStream);
                var worksheet = package.Workbook.Worksheets.FirstOrDefault();

                if (worksheet?.Dimension == null)
                {
                    Snackbar.Add("Excel worksheet is empty or invalid.", Severity.Error);
                    return;
                }

                int rowCount = worksheet.Dimension.Rows;
                int processed = 0;

                for (int row = 6; row <= rowCount; row++)
                {
                    try
                    {
                        var diamond = await ParseExcelDiamondRowAsync(worksheet, row);
                        diamondsDTList.Add(diamond);
                    }
                    catch (Exception exRow)
                    {
                        Snackbar.Add($"Row {row} skipped: {exRow.Message}", Severity.Warning);
                    }

                    processed++;
                    uploadProgress = ((double)processed / (rowCount - 5)) * 100;
                    StateHasChanged(); // Update UI with new progress
                }

                string jsonData = JsonConvert.SerializeObject(diamondsDTList);
                var result = await _diamondRepository.BulkInsertDiamondsAsync(jsonData, diamondId);
            }
            else if (format == ".csv")
            {
                using var reader = new StreamReader(stream);
                using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
                var records = csv.GetRecords<dynamic>().ToList();

                int startRow = 6;
                int totalRows = records.Count - (startRow - 1);
                int processed = 0;

                for (int i = startRow - 1; i < records.Count; i++)
                {
                    try
                    {
                        var rowDict = (IDictionary<string, object>)records[i];
                        var diamond = await ParseCSVDiamondRowAsync(rowDict);
                        diamondsDTList.Add(diamond);
                    }
                    catch (Exception exRow)
                    {
                        Snackbar.Add($"CSV Row {i + 1} skipped: {exRow.Message}", Severity.Warning);
                    }

                    processed++;
                    uploadProgress = ((double)processed / totalRows) * 100;
                    StateHasChanged();
                }

                string jsonData = JsonConvert.SerializeObject(diamondsDTList);
                var result = await _diamondRepository.BulkInsertDiamondsAsync(jsonData, diamondId);
            }
            else
            {
                Snackbar.Add("Unsupported file format. Please upload .xlsx or .csv.", Severity.Error);
            }

            Snackbar.Add("Upload and processing completed successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Upload failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            isUploading = false;
            showProgressBar = false;
            StateHasChanged();
        }
    }


    private async Task<Diamond> ParseExcelDiamondRowAsync(ExcelWorksheet worksheet, int row)
    {
        var Video_NewVal = GetExcelHyperlink(worksheet.Cells[row, 26]);
        var DNA_NewVal = GetExcelHyperlink(worksheet.Cells[row, 3]);
        var Certi_NewVal = GetExcelHyperlink(worksheet.Cells[row, 27]);


        int typeId = await _diamondPPTY.GetDiamondPropertyId(worksheet.Cells[row, 5].Text, SD._TYPE);
        int labId = await _diamondPPTY.GetDiamondPropertyId(worksheet.Cells[row, 6].Text, SD.Lab);
        int shapeId = await _diamondPPTY.GetDiamondPropertyId(worksheet.Cells[row, 7].Text, SD.Shape);
        int colorId = await _diamondPPTY.GetDiamondPropertyId(worksheet.Cells[row, 9].Text, SD.Color);
        int clarityId = await _diamondPPTY.GetDiamondPropertyId(worksheet.Cells[row, 10].Text, SD.Clarity);
        int cutId = await _diamondPPTY.GetDiamondPropertyId(worksheet.Cells[row, 11].Text, SD.Cut);
        int polishId = await _diamondPPTY.GetDiamondPropertyId(worksheet.Cells[row, 12].Text, SD.Polish);
        int symmId = await _diamondPPTY.GetDiamondPropertyId(worksheet.Cells[row, 13].Text, SD.Symmetry);
        int fluorId = await _diamondPPTY.GetDiamondPropertyId(worksheet.Cells[row, 14].Text, SD.Fluor);

        return new Diamond
        {
            StoneId = worksheet.Cells[row, 2].Text,
            DNA = DNA_NewVal,
            Step = worksheet.Cells[row, 4].Text,
            TypeId = typeId > 0 ? typeId : null,
            LabId = labId > 0 ? labId : null,
            ShapeId = shapeId > 0 ? shapeId : null,
            Carat = Convert.ToDecimal(worksheet.Cells[row, 8].Text),
            ClarityId = clarityId > 0 ? clarityId : null,
            ColorId = colorId > 0 ? colorId : null,
            CutId = cutId > 0 ? cutId : null,
            PolishId = polishId > 0 ? polishId : null,
            SymmetryId = symmId > 0 ? symmId : null,
            FluorId = fluorId > 0 ? fluorId : null,
            RAP = Convert.ToDecimal(worksheet.Cells[row, 15].Text),
            Discount = Convert.ToDecimal(worksheet.Cells[row, 16].Text),
            Price = Convert.ToDecimal(worksheet.Cells[row, 17].Text),
            Amount = Convert.ToDecimal(worksheet.Cells[row, 18].Text),
            Measurement = worksheet.Cells[row, 19].Text,
            Ratio = Convert.ToDecimal(worksheet.Cells[row, 20].Text),
            Depth = Convert.ToDecimal(worksheet.Cells[row, 21].Text),
            Table = Convert.ToDecimal(worksheet.Cells[row, 22].Text),
            Shade = worksheet.Cells[row, 23].Text,
            LabShape = worksheet.Cells[row, 24].Text,
            RapAmount = Convert.ToDecimal(worksheet.Cells[row, 25].Text),
            DiamondImagePath = "-",
            DiamondVideoPath = Video_NewVal,
            Certificate = Certi_NewVal,
            IsActivated = true
        };
    }

    private async Task<Diamond> ParseCSVDiamondRowAsync(IDictionary<string, object> row)
    {
        string GetVal(string key) => row.ContainsKey(key) ? row[key]?.ToString() : null;

        int typeId = await _diamondPPTY.GetDiamondPropertyId(GetVal("Type"), SD._TYPE);
        int labId = await _diamondPPTY.GetDiamondPropertyId(GetVal("Lab"), SD.Lab);
        int shapeId = await _diamondPPTY.GetDiamondPropertyId(GetVal("Shape"), SD.Shape);
        int colorId = await _diamondPPTY.GetDiamondPropertyId(GetVal("Color"), SD.Color);
        int clarityId = await _diamondPPTY.GetDiamondPropertyId(GetVal("Clarity"), SD.Clarity);
        int cutId = await _diamondPPTY.GetDiamondPropertyId(GetVal("Cut"), SD.Cut);
        int polishId = await _diamondPPTY.GetDiamondPropertyId(GetVal("Polish"), SD.Polish);
        int symmId = await _diamondPPTY.GetDiamondPropertyId(GetVal("Symmetry"), SD.Symmetry);
        int fluorId = await _diamondPPTY.GetDiamondPropertyId(GetVal("Fluorescence"), SD.Fluor);

        return new Diamond
        {
            StoneId = GetVal("StoneId"),
            DNA = GetVal("DNA"),
            Step = GetVal("Step"),
            TypeId = typeId > 0 ? typeId : null,
            LabId = labId > 0 ? labId : null,
            ShapeId = shapeId > 0 ? shapeId : null,
            Carat = Convert.ToDecimal(GetVal("Carat")),
            ClarityId = clarityId > 0 ? clarityId : null,
            ColorId = colorId > 0 ? colorId : null,
            CutId = cutId > 0 ? cutId : null,
            PolishId = polishId > 0 ? polishId : null,
            SymmetryId = symmId > 0 ? symmId : null,
            FluorId = fluorId > 0 ? fluorId : null,
            RAP = Convert.ToDecimal(GetVal("RAP")),
            Discount = Convert.ToDecimal(GetVal("Discount")),
            Price = Convert.ToDecimal(GetVal("Price")),
            Amount = Convert.ToDecimal(GetVal("Amount")),
            Measurement = GetVal("Measurement"),
            Ratio = Convert.ToDecimal(GetVal("Ratio")),
            Depth = Convert.ToDecimal(GetVal("Depth")),
            Table = Convert.ToDecimal(GetVal("Table")),
            Shade = GetVal("Shade"),
            LabShape = GetVal("LabShape"),
            RapAmount = Convert.ToDecimal(GetVal("RapAmount")),
            DiamondImagePath = "-",
            DiamondVideoPath = GetVal("Video"),
            Certificate = GetVal("Certificate"),
            IsActivated = true
        };
    }


    public static string GetExcelHyperlink(ExcelRange cell)
    {
        // 1. Try getting the hyperlink object
        if (cell.Hyperlink != null)
        {
            return cell.Hyperlink.AbsoluteUri;
        }

        // 2. If no hyperlink object, try to parse formula-based hyperlink
        if (!string.IsNullOrEmpty(cell.Formula) &&
            cell.Formula.StartsWith("HYPERLINK", StringComparison.OrdinalIgnoreCase))
        {
            try
            {
                // Extract URL from formula like =HYPERLINK("url", "text")
                var formula = cell.Formula;
                int firstQuote = formula.IndexOf('"');
                int secondQuote = formula.IndexOf('"', firstQuote + 1);
                if (firstQuote >= 0 && secondQuote > firstQuote)
                {
                    return formula.Substring(firstQuote + 1, secondQuote - firstQuote - 1);
                }
            }
            catch
            {
                // Log or handle parse error if needed
                return null;
            }
        }

        return null; // No hyperlink found
    }
}