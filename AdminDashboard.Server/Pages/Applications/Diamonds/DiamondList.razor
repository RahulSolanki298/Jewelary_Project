@page "/applications/diamonds/diamond-list"

@using Business.Repository.IRepository
@using Common
@using global::Models

@inject IDialogService Dialog
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudPaper Class="p-6 mx-auto mt-4" Elevation="12">
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="d-flex justify-left align-start mud-width-full px-4 py-2">
                <MudText Typo="Typo.h4" Color="Color.Inherit" Class="font-weight-bold" Style="font-size: 1.5rem; letter-spacing: 1px;">
                    Diamond List
                </MudText>
            </MudPaper>
            <MudPaper Class="d-flex justify-end align-start mud-width-full px-4 py-2">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Material.Filled.ArrowForward"
                           OnClick="AddDiamond"
                           Class="me-2">
                    Go to Add Diamond
                </MudButton>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.UploadFile"
                           OnClick="OpenUploadDialog">
                    Upload File
                </MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
    <MudItem xs="12">
        <MudTable Elevation="6" Items="@diamondList" Filter="Search" Hover="@hover" Dense="@dense" Bordered="true" Striped="true">
            <HeaderContent>
                @foreach (var column in tableColumns)
                {
                <MudTh Style="color: #00796b; font-weight: bold;">
                    <MudTableSortLabel SortBy="@column.SortExpression">@column.Label</MudTableSortLabel>
                </MudTh>
                }
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                @foreach (var column in tableColumns)
                {
                <MudTd DataLabel="@column.Label" Style="font-size: 1rem; font-weight: 500; color: #333;">
                    @context.GetType().GetProperty(column.Property)?.GetValue(context)
                </MudTd>
                }
                <MudTd>
                    <MudIconButton OnClick="() => Edit(context.Id)" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit"
                                   Class="transition-all duration-200 hover:scale-110" />
                    <MudIconButton OnClick="() => ConfirmDelete(context.Id)" Color="Color.Error" Icon="@Icons.Material.Filled.Delete"
                                   Class="transition-all duration-200 hover:scale-110" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] {5, 10, 20, 50}" />
            </PagerContent>
        </MudTable>
    </MudItem>
</MudPaper>



<MudMessageBox @ref="mudMessageBox" Title="Confirm Delete" CancelText="Cancel">
    <MessageContent>Are you sure you want to delete this diamond?</MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private bool hover = true;
    private bool dense = true;
    private string searchString = "";
    private IEnumerable<DiamondData> diamondList = new List<DiamondData>();
    [Inject]
    private IDiamondPropertyRepository _diamondPPTY { get; set; }

    [Inject]
    private IDiamondRepository _diamondRepo { get; set; }

    private MudMessageBox mudMessageBox;
    private IBrowserFile selectedFile;
    private MudDialog BulkAddDialog;

    private readonly List<(string Label, string Property, Func<DiamondData, object> SortExpression)> tableColumns = new()
    {
            ("StoneId", "StoneId", x => x.StoneId),
            ("ShapeName", "ShapeName", x => x.ShapeName),
            ("Carat", "Carat", x => x.Carat),
            ("Color", "ColorName", x => x.ColorName),
            ("Clarity", "ClarityName", x => x.ClarityName),
            ("Cut", "CutName", x => x.CutName),
            ("Polish", "PolishName", x => x.PolishName),
            ("Symmetry", "SymmetryName", x => x.SymmetyName),
            ("Depth", "Depth", x => x.Depth),
            ("Price", "Price", x => x.Price)
        };

    protected override async Task OnInitializedAsync() => await LoadDiamondList();

    private async Task LoadDiamondList()
    {
        try
        {
            diamondList = await _diamondRepo.GetDiamondList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading diamond list: {ex.Message}", Severity.Error);
        }
    }

    private bool Search(DiamondData data) =>
        string.IsNullOrWhiteSpace(searchString) ||
        data.ClarityName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
        data.ShapeName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true;

    private void OpenUploadDialog()
    {
        var options = new DialogOptions { CloseButton = true };
        Dialog.Show<UploadDiamond>("Upload Diamond File", options);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
       
    }

    private void Edit(int diamondId) => Snackbar.Add($"Edit action triggered for ID: {diamondId}", Severity.Info);

    private void ConfirmDelete(int diamondId) => Snackbar.Add($"Delete action triggered for ID: {diamondId}", Severity.Warning);

    private void OnBulkAddProductClick()
    {
        BulkAddDialog.Show();
    }

    private void AddDiamond()
    {
        NavigationManager.NavigateTo("/applications/diamond/add-diamond");
    }


    private void UploadedData()
    {

    }
}
