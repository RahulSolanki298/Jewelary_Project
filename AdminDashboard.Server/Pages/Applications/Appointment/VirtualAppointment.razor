@page "/applications/virtualAppointment/appointments"

@using Business.Repository.IRepository
@using Models
@using global::Models

@inject IVirtualAppointmentRepo virtualAppointmentReposiory
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<MudTable Elevation="10" Items="virtualAppointments" SortLabel="Sort" Hover="true" Striped="true" Filter="new Func<VirtualAppointmentDTO,bool>(Search)">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Virtual Appointment List</MudText>
		<MudToolBarSpacer />
		<MudTextField @bind-Value="searchstring" Placeholder="Search Sub Category..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
	</ToolBarContent>
	<HeaderContent>
		<MudTh><MudTableSortLabel SortBy="new Func<VirtualAppointmentDTO, object>(x=>x.CompanyName)" InitialDirection="SortDirection.Ascending"></MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<VirtualAppointmentDTO, object>(x=>x.FirstName)">First Name</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<VirtualAppointmentDTO, object>(x=>x.LastName)">Last Name</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<VirtualAppointmentDTO, object>(x=>x.CategoryName)">Category Name</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<VirtualAppointmentDTO, object>(x=>x.RegisterDate)">Register Date</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<VirtualAppointmentDTO, object>(x=>x.RegisterTime)">Register Time</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<VirtualAppointmentDTO, object>(x=>x.Status)">Status</MudTableSortLabel></MudTh>
		<MudTh>Actions</MudTh>
	</HeaderContent>

	<RowTemplate>
		<MudTd DataLabel="CompanyName">@context.CompanyName</MudTd>
		<MudTd DataLabel="FirstName">@context.FirstName</MudTd>
		<MudTd DataLabel="LastName">@context.LastName</MudTd>
		<MudTd DataLabel="CategoryName">@context.CategoryName</MudTd>
		<MudTd DataLabel="RegisterDate">@context.RegisterDate</MudTd>
		<MudTd DataLabel="RegisterTime">@context.RegisterTime</MudTd>
		<MudTd DataLabel="Status">
			@if (context.Status == "Requested")
			{
				<MudButton Color="Color.Success">@context.Status</MudButton>
			}
			else
			{
				<MudButton Color="Color.Error">@context.Status</MudButton>
			}
		</MudTd>
		<MudTd>Actions</MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager PageSizeOptions="new int[]{5,10,20,50,100}" />
	</PagerContent>
</MudTable>


@code {
	private IEnumerable<VirtualAppointmentDTO> virtualAppointments { get; set; } = new List<VirtualAppointmentDTO>();
	private bool IsLoading { get; set; } = false;
	private int currentPage = 0;
	private int pageSize = 5;
	private string searchstring = "";

	protected override async Task OnInitializedAsync()
	{
		IsLoading = true;
		var responseList = await virtualAppointmentReposiory.GetVirtualAppointmentList();
		virtualAppointments = responseList.Skip(currentPage * pageSize).Take(pageSize).ToList();

		if (virtualAppointments.Count() == 0)
		{
			IsLoading = false;
		}
	}

	private bool Search(VirtualAppointmentDTO virtualAppointment)
	{
		if (virtualAppointment.CompanyName != null && virtualAppointment.CategoryName != null &&
			virtualAppointment.FirstName.Contains(searchstring, StringComparison.OrdinalIgnoreCase) ||
			virtualAppointment.LastName.Contains(searchstring, StringComparison.OrdinalIgnoreCase))
		{
			return true;
		}
		return false;
	}
}
