@page "/virtual-appointment-list"
@using Business.Repository.IRepository
@using Models
@using global::Models
@inject IVirtualAppointmentRepo virtualAppointmentReposiory
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager

<MudItem xs="12" sm="12" md="12">
	<MudCard Elevation="25" Style="height:100%;">
		<MudCardHeader>
			<CardHeaderContent>
				<MudText Typo="Typo.h6">Virtual Appointment List</MudText>
			</CardHeaderContent>
		</MudCardHeader>
		<MudCardContent Class="px-0">
			<MudTable Items="virtualAppointments" SortLabel="Sort" Hover="true" Striped="true">
				<HeaderContent>
					<MudTh Sortable="true" SortLabel="CompanyName">Company Name</MudTh>
					<MudTh Sortable="true" SortLabel="FirstName">First Name</MudTh>
					<MudTh Sortable="true" SortLabel="LastName">Last Name</MudTh>
					<MudTh Sortable="true" SortLabel="ProductType">Product Type</MudTh>
					<MudTh Sortable="true" SortLabel="RegisterDate">Register Date</MudTh>
					<MudTh Sortable="true" SortLabel="RegisterTime">Register Time</MudTh>
					<MudTh Sortable="true" SortLabel="Status">Staus</MudTh>
					<MudTh>Actions</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel="CompanyName">@context.CompanyName</MudTd>
					<MudTd DataLabel="FirstName">@context.FirstName</MudTd>
					<MudTd DataLabel="LastName">@context.LastName</MudTd>
					<MudTd DataLabel="CategoryName">@context.CategoryName</MudTd>
					<MudTd DataLabel="RegisterDate">@context.RegisterDate</MudTd>
					<MudTd DataLabel="RegisterTime">@context.RegisterTime</MudTd>
					<MudTd DataLabel="Status">
						@if (context.Status == "Requested")
						{
							<MudButton Color="Color.Success">@context.Status</MudButton>
						}
						else
						{
							<MudButton Color="Color.Error">@context.Status</MudButton>
						}
					</MudTd>
					<MudTd>
						
					</MudTd>
				</RowTemplate>
			</MudTable>
		</MudCardContent>
	</MudCard>
</MudItem>




@code {
	private IEnumerable<VirtualAppointmentDTO> virtualAppointments { get; set; } = new List<VirtualAppointmentDTO>();
	private bool IsLoading { get; set; } = false;
	private int currentPage = 0;
	private int pageSize = 5;

	protected override async Task OnInitializedAsync()
	{
		IsLoading = true;
		var responseList = await virtualAppointmentReposiory.GetVirtualAppointmentList();
		virtualAppointments = responseList.Skip(currentPage * pageSize).Take(pageSize).ToList();

		if (virtualAppointments.Count() == 0)
		{
			IsLoading = false;
		}
	}
}
