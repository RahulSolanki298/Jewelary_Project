@using Common
@using Newtonsoft.Json
@using global::Models
@inject ISnackbar Snackbar

<MudDialog>
	<TitleContent>
		Add Products 
	</TitleContent>
    <DialogContent>
        <InputFile OnChange="HandleFileSelected" />
        @if (isUploading == true)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        <MudToolBarSpacer />
        <p><span style="font-weight:bold">Note :</span></p>
        <p>Please upload file with the style. (ex: Essentials, Solitaire Ring, Mini Huggies)</p>
        <p>Download Excel Format : <MudButton Color="Color.Primary">Download</MudButton></p>

        <MudToolBarSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto text-center" @onclick="@(() => HandleDataSave())">Verify Datasheet</MudButton>
        @if (isUploading == true)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }
        
        <MudTable Elevation="5" Items="productList">
            <HeaderContent>
                <MudTh>Product</MudTh>
                <MudTh>Vendor</MudTh>
                <MudTh>Style</MudTh>
                <MudTh>Length</MudTh>
                <MudTh>Band Width</MudTh>
                <MudTh>Weight</MudTh>
                <MudTh>Grades</MudTh>
                <MudTh>Diamond Type</MudTh>
                <MudTh>Price (14k)</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Product">
                    <MudTextField @bind-Value="context.EventName" />
                </MudTd>
                <MudTd DataLabel="VenderName">
                    <MudTextField @bind-Value="context.VenderName" />
                </MudTd>
                <MudTd DataLabel="VenderStyle">
                    <MudTextField @bind-Value="context.VenderStyle" />
                </MudTd>
                <MudTd DataLabel="Length">
                    <MudTextField @bind-Value="context.Length" />
                </MudTd>
                <MudTd DataLabel="BandWidth">
                    <MudTextField @bind-Value="context.BandWidth" />
                </MudTd>
                <MudTd DataLabel="GoldWeight">
                    <MudTextField @bind-Value="context.GoldWeight" />
                </MudTd>
                <MudTd DataLabel="Grades">
                    <MudTextField @bind-Value="context.Grades" />
                </MudTd>
                <MudTd DataLabel="DyamondType">
                    <MudTextField @bind-Value="context.ProductType" />
                </MudTd>
                <MudTd DataLabel="Price">
                    <MudTextField @bind-Value="context.Price" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{5}" />
            </PagerContent>
        </MudTable>
    </DialogContent>
	
</MudDialog>





@code {
    private IBrowserFile selectedFile;
    private bool isUploading = false;
    private IEnumerable<ProductDTO> productList { get; set; } = new List<ProductDTO>();


    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            Snackbar.Add("No file selected.", Severity.Warning);
            return;
        }

        selectedFile = e.File;
        isUploading = true;     // Start showing the loader

        try
        {
            var fileContent = new MultipartFormDataContent();
            var stream = selectedFile.OpenReadStream(maxAllowedSize: 10_000_000); // Set max size limit (10MB in this case)
            var fileStreamContent = new StreamContent(stream);
            
            isUploading = false;
        }
        catch (Exception ex)
        {
            isUploading = false;
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async Task HandleDataSave()
    {
        if (productList == null || !productList.Any())
        {
            Snackbar.Add("No product data to save.", Severity.Warning);
            return;
        }

        isUploading = true; // You can reuse this to show loader/spinner

        try
        {
            var httpClient = new HttpClient();
            var jsonContent = new StringContent(JsonConvert.SerializeObject(productList), System.Text.Encoding.UTF8, "application/json");

            var response = await httpClient.PostAsync($"{SD.BaseApiUrl}/api/product/SaveAllProduct", jsonContent);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Products saved successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Failed to save products. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isUploading = false;
        }
    }

}