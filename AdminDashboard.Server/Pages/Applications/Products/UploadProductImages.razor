@using Common
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        Add Product Images
    </TitleContent>
    <DialogContent>
        <MudCheckBox @bind-Checked="isFileUpload" Label="Upload a file?" />

        @if (isFileUpload)
        {
            <InputFile OnChange="HandleFileSelected" />
        }
        else
        {
            <InputText @bind-Value="FolderPath"></InputText>
            <MudButton OnClick="UploadImages">Upload Images</MudButton>
        }

        @if (isUploading)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
        }

        <MudToolBarSpacer />
        <p><span style="font-weight:bold">Note :</span></p>
        <p>Please upload zip file.</p>
    </DialogContent>
</MudDialog>



@code {
    private IBrowserFile selectedFile;
    private bool isFileUpload = false;
    private bool isUploading = false;
    public string FolderPath = string.Empty;

    private string message;
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            Snackbar.Add("No file selected.", Severity.Warning);
            return;
        }

        selectedFile = e.File;
        isUploading = true; // Start showing the loader
        message = string.Empty;

        try
        {
            var maxFileSize = 5L * 1024 * 1024 * 1024; ;
            using var stream = selectedFile.OpenReadStream(maxFileSize);
            using var content = new MultipartFormDataContent();
            using var streamContent = new StreamContent(stream);

            content.Add(new StreamContent(stream), "zipFile", selectedFile.Name);


            using var httpClient = new HttpClient
            {
                BaseAddress = new Uri(SD.BaseApiUrl)
            };

            var response = await httpClient.PostAsync("api/product/BulkProductCollectionImagesUpload", content);


            if (response.IsSuccessStatusCode)
            {
                message = "File uploaded successfully!";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                message = $"Upload failed: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            message = $"Upload error: {ex.Message}";
        }
        finally
        {
            isUploading = false; // Hide the loader
        }
    }

    private async Task UploadImages()
    {
        if (string.IsNullOrWhiteSpace(FolderPath))
        {
            Console.WriteLine("Folder path cannot be empty.");
            return;
        }

        // Prepare content for the POST request
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(FolderPath), "folderPath");

        using var httpClient = new HttpClient
        {
            BaseAddress = new Uri(SD.BaseApiUrl)
        };
        ///FolderPath
        var response = await httpClient.PostAsync("api/product/BulkProductImagesUploadFromFolder", content);
        var result = await response.Content.ReadAsStringAsync();

        // Log the result from the API
        Console.WriteLine(result);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Images uploaded successfully.");
        }
        else
        {
            Console.WriteLine($"Failed: {result}");
        }
    }

}
