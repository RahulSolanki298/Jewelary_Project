@using Common
@inject ISnackbar Snackbar

<MudDialog>
	<TitleContent>
		Add Product Images
	</TitleContent>
	<DialogContent>



		<InputFile OnChange="HandleFileSelected" />
		@if (isUploading == true)
		{
			<MudProgressCircular Color="Color.Default" Indeterminate="true" />
		}
		<MudToolBarSpacer />
		<p><span style="font-weight:bold">Note :</span></p>
		<p>Please upload zip file.</p>
	</DialogContent>
	<DialogActions>
		<MudButton Color="Color.Error">Cancel</MudButton>
	</DialogActions>
</MudDialog>



@code {
    private IBrowserFile selectedFile;
    private bool isUploading = false;
    private string message;
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            Snackbar.Add("No file selected.", Severity.Warning);
            return;
        }

        selectedFile = e.File;
        isUploading = true; // Start showing the loader
        message = string.Empty;

        try
        {
            var maxFileSize = 5L * 1024 * 1024 * 1024; ;
            using var stream = selectedFile.OpenReadStream(maxFileSize);
            using var content = new MultipartFormDataContent();
            using var streamContent = new StreamContent(stream);

            //streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
            //content.Add(streamContent, "zipFile", selectedFile.Name);

            content.Add(new StreamContent(stream), "zipFile", selectedFile.Name);


            using var httpClient = new HttpClient
            {
                BaseAddress = new Uri(SD.BaseApiUrl)
            };

            var response = await httpClient.PostAsync("api/product/BulkProductCollectionImagesUpload", content);


            if (response.IsSuccessStatusCode)
            {
                message = "File uploaded successfully!";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                message = $"Upload failed: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            message = $"Upload error: {ex.Message}";
        }
        finally
        {
            isUploading = false; // Hide the loader
        }
    }

}
