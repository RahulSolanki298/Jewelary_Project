@page "/applications/product/product-style-list"

@using Business.Repository
@using Business.Repository.IRepository
@using System.IO
@using Common
@using OfficeOpenXml
@using System.Net.Http.Json;
@using global::Models

@inject IDialogService Dialog
@inject IProductRepository productRepository
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudText Typo="Typo.h6">Product List</MudText>
            <MudToolBarSpacer />

            @*<MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
                Upload File
            </MudButton>*@

            <MudButton OnClick="@(() => OpenDialogAsync(_fullScreen))" Variant="Variant.Filled" Color="Color.Primary">Upload File</MudButton>

        </MudPaper>
    </MudItem>
    <MudItem xl="12">
        <MudTable Elevation="10" Items="productList" Hover="@hower" Dense="@dense">
            <HeaderContent>
                <MudTh>Image</MudTh>
                <MudTh>Product</MudTh>
                <MudTh>Vendor</MudTh>
                <MudTh>Style</MudTh>
                <MudTh>Length</MudTh>
                <MudTh>Band Width</MudTh>
                <MudTh>Weight</MudTh>
                <MudTh>Grades</MudTh>
                <MudTh>Diamond Type</MudTh>
                <MudTh>Price (14k)</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ImageUrl">
                    @if (@context.ProductImageVideos.Count > 0 && !string.IsNullOrWhiteSpace(context.ProductImageVideos.FirstOrDefault().ImageUrl))
                    {
                        <img src="@SD.BaseApiUrl\@context.ProductImageVideos.FirstOrDefault().ImageUrl" style="max-width:35px;height:auto;" />
                    }
                    else
                    {
                        <img src="/images/No_Image_Available.jpg" style="max-width:35px;height:auto;" />
                    }
                </MudTd>
                <MudTd DataLabel="Product">
                    @context.ShapeName @context.BandWidth @context.Length @context.Sku
                </MudTd>
                <MudTd DataLabel="VenderName">@context.VenderName</MudTd>
                <MudTd DataLabel="StyleName">@context.StyleName</MudTd>
                <MudTd DataLabel="Length">@context.Length</MudTd>
                <MudTd DataLabel="BandWidth">@context.BandWidth</MudTd>
                <MudTd DataLabel="Weights">@context.Weights</MudTd>
                <MudTd DataLabel="Grades">@context.Grades</MudTd>
                <MudTd DataLabel="DyamondType">@context.ProductType</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
                <MudTd>
                    <MudFab @onclick="@(() => Edit(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                    <MudFab @onclick="@(() => Delete(context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{5,10,20,50,100}" />
            </PagerContent>
        </MudTable>


        <MudSwitch @bind-Checked="@hower" Color="Color.Primary" Label="Hover" />
        <MudSwitch @bind-Checked="@dense" Color="Color.Secondary" Label="Dense" />

        <MudMessageBox @ref="_mudMessageBox" Title="Delete" CancelText="Cancel">
            <MessageContent>
                Are you sure you want to delete?
            </MessageContent>
            <YesButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
            </YesButton>
        </MudMessageBox>

    </MudItem>
</MudGrid>

@code {

    private IBrowserFile selectedFile;

    private readonly DialogOptions _fullScreen = new() { FullScreen = true, CloseButton = true };
    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true, CloseButton = true };
    private bool hower = true;
    private bool dense = true;
    private string searchstring = "";
    private ProductDTO product = new ProductDTO();
    private IEnumerable<ProductDTO> productList { get; set; } = new List<ProductDTO>();
    private bool IsLoading { get; set; } = false;
    private int currentPage = 0;
    private int pageSize = 5;
    private MudMessageBox _mudMessageBox;
    private MudDialog BulkAddDialog;
    private string uploadedFilePath = "";
    [Inject]
    public HttpClient Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await GetProductPropertyList();
        IsLoading = false;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            Snackbar.Add("No file selected.", Severity.Warning);
            return;
        }

        selectedFile = e.File;

        try
        {
            var fileContent = new MultipartFormDataContent();
            var stream = selectedFile.OpenReadStream(maxAllowedSize: 10_000_000); // Set max size limit (10MB in this case)
            var fileStreamContent = new StreamContent(stream);
            fileStreamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");

            fileContent.Add(fileStreamContent, "file", selectedFile.Name);

            var httpClient = new HttpClient();
            var response = await httpClient.PostAsync($"{SD.BaseApiUrl}/api/product/BulkNewProductUpload", fileContent);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Products uploaded successfully!", Severity.Success);
                await GetProductPropertyList(); // Refresh the product list after successful upload
            }
            else
            {
                Snackbar.Add("Failed to upload products. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private bool Search(ProductDTO product)
    {
        return product.ShapeName?.Contains(searchstring, StringComparison.OrdinalIgnoreCase) == true;
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseButton = true };
        Dialog.Show<UploadStyleFile>("Show Upload Collection", options);
    }

    private void Edit(Guid productId)
    {
        // Implement edit logic here
    }

    private void Delete(Guid productId)
    {
        // Implement delete logic here
    }

    private void OnBulkAddProductClick()
    {
        BulkAddDialog.Show();
    }

    private async Task GetProductPropertyList()
    {
        try
        {
            productList = await Http.GetFromJsonAsync<List<ProductDTO>>($"{SD.BaseApiUrl}/api/Product/GetProductDetailsList");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading product list: {ex.Message}", Severity.Error);
        }
    }

    private void OpenDialogAsync(DialogOptions options)
    {
        Dialog.Show<UploadStyleFile>("Custom Options Dialog", options);
    }

}
