@page "/applications/product/product-style-list"

@using Business.Repository
@using Business.Repository.IRepository
@using System.IO
@using Common
@using OfficeOpenXml
@using System.Net.Http.Json;
@using global::Models

@inject IDialogService Dialog
@inject IProductRepository productRepository
@inject ISnackbar Snackbar

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="d-flex justify-end align-start mud-width-full px-4 py-2">
            <MudButton OnClick="@(() => OpenDialogAsync(_fullScreen))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Small"
                       Class="me-2">
                Upload File
            </MudButton>
            <MudButton OnClick="@(() => OpenDialog())"
                       Variant="Variant.Filled"
                       Color="Color.Secondary"
                       Size="Size.Small">
                Upload Images
            </MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>


<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Engagement-Ring">
        <MudItem xl="12">
            <MudTable Elevation="10" Items="ringsList">
                <HeaderContent>
                    <MudTh style="font-weight:bold;"><input type="checkbox" /></MudTh>
                    <MudTh style="font-weight:bold;">Image</MudTh>
                    <MudTh style="font-weight:bold;">Product</MudTh>
                    <MudTh style="font-weight:bold;">Vendor</MudTh>
                    <MudTh style="font-weight:bold;">Style</MudTh>
                    <MudTh style="font-weight:bold;">Length</MudTh>
                    <MudTh style="font-weight:bold;">Band Width</MudTh>
                    <MudTh style="font-weight:bold;">Weight</MudTh>
                    <MudTh style="font-weight:bold;">Price (14k)</MudTh>
                    <MudTh style="font-weight:bold;">Price (18k)</MudTh>
                    <MudTh style="font-weight:bold;">Price (Plat)</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <input type="checkbox" />
                    </MudTd>
                    <MudTd DataLabel="ImageUrl">
                        @if (@context.ProductImageVideos.Count > 0 && !string.IsNullOrWhiteSpace(context.ProductImageVideos.FirstOrDefault().ImageUrl))
                        {
                            <MudPaper Style="cursor: pointer; display:inline-block;" @onclick="@(() => OpenImageDialog(context.ProductImageVideos))">
                                <img src="@SD.BaseApiUrl/@context.ProductImageVideos.First().ImageUrl" style="max-width:35px;height:auto;" />
                            </MudPaper>
                        }
                        else
                        {
                            <img src="/images/No_Image_Available.jpg" style="max-width:35px;height:auto;" />
                        }
                    </MudTd>
                    <MudTd DataLabel="Product">
                        <h3> @context.Title</h3>
                        <p>@context.Grades @context.CTW @context.CenterShapeName @context.CategoryName</p>
                    </MudTd>
                    <MudTd DataLabel="VenderName">@context.VenderName</MudTd>
                    <MudTd DataLabel="VenderStyle">@context.VenderStyle</MudTd>
                    <MudTd DataLabel="Length">@context.Length</MudTd>
                    <MudTd DataLabel="BandWidth">@context.BandWidth</MudTd>
                    <MudTd DataLabel="GoldWeight">@context.GoldWeight</MudTd>
                    <MudTd DataLabel="Price">@context.Price</MudTd>
                    <MudTd DataLabel="Price">@context.Price</MudTd>
                    <MudTd DataLabel="Price">@context.Price</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{5,10,20,50,100}" />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudTabPanel>
    <MudTabPanel Text="Wedding Bands">
        <MudItem xl="12">
            <MudTable Elevation="10" Items="bandsList">
                <HeaderContent>
                    <MudTh style="font-weight:bold;">Image</MudTh>
                    <MudTh style="font-weight:bold;">Product</MudTh>
                    <MudTh style="font-weight:bold;">Vendor</MudTh>
                    <MudTh style="font-weight:bold;">Style</MudTh>
                    <MudTh style="font-weight:bold;">Length</MudTh>
                    <MudTh style="font-weight:bold;">Band Width</MudTh>
                    <MudTh style="font-weight:bold;">Weight</MudTh>
                    <MudTh style="font-weight:bold;">Grades</MudTh>
                    <MudTh style="font-weight:bold;">Diamond Type</MudTh>
                    <MudTh style="font-weight:bold;">Price (14k)</MudTh>
                    <MudTh style="font-weight:bold;">Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ImageUrl">
                        @if (@context.ProductImageVideos.Count > 0 && !string.IsNullOrWhiteSpace(context.ProductImageVideos.FirstOrDefault().ImageUrl))
                        {
                            <MudPaper Style="cursor: pointer; display:inline-block;" @onclick="@(() => OpenImageDialog(context.ProductImageVideos))">
                                <img src="@SD.BaseApiUrl/@context.ProductImageVideos.First().ImageUrl" style="max-width:35px;height:auto;" />
                            </MudPaper>
                        }
                        else
                        {
                            <img src="/images/No_Image_Available.jpg" style="max-width:35px;height:auto;" />
                        }
                    </MudTd>
                    <MudTd DataLabel="Product">
                        @context.Title
                    </MudTd>
                    <MudTd DataLabel="VenderName">@context.VenderName</MudTd>
                    <MudTd DataLabel="VenderStyle">@context.VenderStyle</MudTd>
                    <MudTd DataLabel="Length">@context.Length</MudTd>
                    <MudTd DataLabel="BandWidth">@context.BandWidth</MudTd>
                    <MudTd DataLabel="GoldWeight">@context.GoldWeight</MudTd>
                    <MudTd DataLabel="Grades">@context.Grades</MudTd>
                    <MudTd DataLabel="DyamondType">@context.ProductType</MudTd>
                    <MudTd DataLabel="Price">@context.Price</MudTd>
                    <MudTd>
                        <MudFab @onclick="@(() => Edit(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                        <MudFab @onclick="@(() => Delete(context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[]{5,10,20,50,100}" />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudTabPanel>
    <MudTabPanel Text="Earrings">
        <MudTable Elevation="10" Items="earringsList">
            <HeaderContent>
                <MudTh>Image</MudTh>
                <MudTh>Product</MudTh>
                <MudTh>Vendor</MudTh>
                <MudTh>Style</MudTh>
                <MudTh>Length</MudTh>
                <MudTh>Band Width</MudTh>
                <MudTh>Weight</MudTh>
                <MudTh>Grades</MudTh>
                <MudTh>Diamond Type</MudTh>
                <MudTh>Price (14k)</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ImageUrl">
                    @if (@context.ProductImageVideos.Count > 0 && !string.IsNullOrWhiteSpace(context.ProductImageVideos.FirstOrDefault().ImageUrl))
                    {
                        <MudPaper Style="cursor: pointer; display:inline-block;" @onclick="@(() => OpenImageDialog(context.ProductImageVideos))">
                            <img src="@SD.BaseApiUrl/@context.ProductImageVideos.First().ImageUrl" style="max-width:35px;height:auto;" />
                        </MudPaper>
                    }
                    else
                    {
                        <img src="/images/No_Image_Available.jpg" style="max-width:35px;height:auto;" />
                    }
                </MudTd>
                <MudTd DataLabel="Product">
                    @context.Title
                </MudTd>
                <MudTd DataLabel="VenderName">@context.VenderName</MudTd>
                <MudTd DataLabel="VenderStyle">@context.VenderStyle</MudTd>
                <MudTd DataLabel="Length">@context.Length</MudTd>
                <MudTd DataLabel="BandWidth">@context.BandWidth</MudTd>
                <MudTd DataLabel="GoldWeight">@context.GoldWeight</MudTd>
                <MudTd DataLabel="Grades">@context.Grades</MudTd>
                <MudTd DataLabel="DyamondType">@context.ProductType</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
                <MudTd>
                    <MudFab @onclick="@(() => Edit(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                    <MudFab @onclick="@(() => Delete(context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{5,10,20,50,100}" />
            </PagerContent>
        </MudTable>
    </MudTabPanel>

    <MudTabPanel Text="Pendants">
        <MudTable Elevation="10" Items="pendantsList">
            <HeaderContent>
                <MudTh>Image</MudTh>
                <MudTh>Product</MudTh>
                <MudTh>Vendor</MudTh>
                <MudTh>Style</MudTh>
                <MudTh>Length</MudTh>
                <MudTh>Band Width</MudTh>
                <MudTh>Weight</MudTh>
                <MudTh>Grades</MudTh>
                <MudTh>Diamond Type</MudTh>
                <MudTh>Price (14k)</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ImageUrl">
                    @if (@context.ProductImageVideos.Count > 0 && !string.IsNullOrWhiteSpace(context.ProductImageVideos.FirstOrDefault().ImageUrl))
                    {
                        <MudPaper Style="cursor: pointer; display:inline-block;" @onclick="@(() => OpenImageDialog(context.ProductImageVideos))">
                            <img src="@SD.BaseApiUrl/@context.ProductImageVideos.First().ImageUrl" style="max-width:35px;height:auto;" />
                        </MudPaper>
                    }
                    else
                    {
                        <img src="/images/No_Image_Available.jpg" style="max-width:35px;height:auto;" />
                    }
                </MudTd>
                <MudTd DataLabel="Product">
                    @context.Title
                </MudTd>
                <MudTd DataLabel="VenderName">@context.VenderName</MudTd>
                <MudTd DataLabel="VenderStyle">@context.VenderStyle</MudTd>
                <MudTd DataLabel="Length">@context.Length</MudTd>
                <MudTd DataLabel="BandWidth">@context.BandWidth</MudTd>
                <MudTd DataLabel="GoldWeight">@context.GoldWeight</MudTd>
                <MudTd DataLabel="Grades">@context.Grades</MudTd>
                <MudTd DataLabel="DyamondType">@context.ProductType</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
                <MudTd>
                    <MudFab @onclick="@(() => Edit(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                    <MudFab @onclick="@(() => Delete(context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{5,10,20,50,100}" />
            </PagerContent>
        </MudTable>
    </MudTabPanel>

    <MudTabPanel Text="Bracelets">
        <MudTable Elevation="10" Items="braceletsList">
            <HeaderContent>
                <MudTh>Image</MudTh>
                <MudTh>Product</MudTh>
                <MudTh>Vendor</MudTh>
                <MudTh>Style</MudTh>
                <MudTh>Length</MudTh>
                <MudTh>Band Width</MudTh>
                <MudTh>Weight</MudTh>
                <MudTh>Grades</MudTh>
                <MudTh>Diamond Type</MudTh>
                <MudTh>Price (14k)</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ImageUrl">
                    @if (@context.ProductImageVideos.Count > 0 && !string.IsNullOrWhiteSpace(context.ProductImageVideos.FirstOrDefault().ImageUrl))
                    {
                        <MudPaper Style="cursor: pointer; display:inline-block;" @onclick="@(() => OpenImageDialog(context.ProductImageVideos))">
                            <img src="@SD.BaseApiUrl/@context.ProductImageVideos.First().ImageUrl" style="max-width:35px;height:auto;" />
                        </MudPaper>
                    }
                    else
                    {
                        <img src="/images/No_Image_Available.jpg" style="max-width:35px;height:auto;" />
                    }
                </MudTd>
                <MudTd DataLabel="Product">
                    @context.Title
                </MudTd>
                <MudTd DataLabel="VenderName">@context.VenderName</MudTd>
                <MudTd DataLabel="VenderStyle">@context.VenderStyle</MudTd>
                <MudTd DataLabel="Length">@context.Length</MudTd>
                <MudTd DataLabel="BandWidth">@context.BandWidth</MudTd>
                <MudTd DataLabel="GoldWeight">@context.GoldWeight</MudTd>
                <MudTd DataLabel="Grades">@context.Grades</MudTd>
                <MudTd DataLabel="DyamondType">@context.ProductType</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
                <MudTd>
                    <MudFab @onclick="@(() => Edit(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                    <MudFab @onclick="@(() => Delete(context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{5,10,20,50,100}" />
            </PagerContent>
        </MudTable>
    </MudTabPanel>

    <MudTabPanel Text="Others">
        <MudTable Elevation="10" Items="productList">
            <HeaderContent>
                <MudTh>Image</MudTh>
                <MudTh>Product</MudTh>
                <MudTh>Vendor</MudTh>
                <MudTh>Style</MudTh>
                <MudTh>Length</MudTh>
                <MudTh>Band Width</MudTh>
                <MudTh>Weight</MudTh>
                <MudTh>Grades</MudTh>
                <MudTh>Diamond Type</MudTh>
                <MudTh>Price (14k)</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="ImageUrl">
                    @if (@context.ProductImageVideos.Count > 0 && !string.IsNullOrWhiteSpace(context.ProductImageVideos.FirstOrDefault().ImageUrl))
                    {
                        <MudPaper Style="cursor: pointer; display:inline-block;" @onclick="@(() => OpenImageDialog(context.ProductImageVideos))">
                            <img src="@SD.BaseApiUrl/@context.ProductImageVideos.First().ImageUrl" style="max-width:35px;height:auto;" />
                        </MudPaper>
                    }
                    else
                    {
                        <img src="/images/No_Image_Available.jpg" style="max-width:35px;height:auto;" />
                    }
                </MudTd>
                <MudTd DataLabel="Product">
                    @context.Title
                </MudTd>
                <MudTd DataLabel="VenderName">@context.VenderName</MudTd>
                <MudTd DataLabel="VenderStyle">@context.VenderStyle</MudTd>
                <MudTd DataLabel="Length">@context.Length</MudTd>
                <MudTd DataLabel="BandWidth">@context.BandWidth</MudTd>
                <MudTd DataLabel="GoldWeight">@context.GoldWeight</MudTd>
                <MudTd DataLabel="Grades">@context.Grades</MudTd>
                <MudTd DataLabel="DyamondType">@context.ProductType</MudTd>
                <MudTd DataLabel="Price">@context.Price</MudTd>
                <MudTd>
                    <MudFab @onclick="@(() => Edit(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                    <MudFab @onclick="@(() => Delete(context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{5,10,20,50,100}" />
            </PagerContent>
        </MudTable>
    </MudTabPanel>


    <MudMessageBox @ref="_mudMessageBox" Title="Delete" CancelText="Cancel">
        <MessageContent>
            Are you sure you want to delete?
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
        </YesButton>
    </MudMessageBox>
</MudTabs>

@code {

    private IBrowserFile selectedFile;

    private readonly DialogOptions _fullScreen = new() { FullScreen = true, CloseButton = true };
    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.ExtraLarge, FullWidth = true, CloseButton = true };

    private string searchstring = "";
    private ProductDTO product = new ProductDTO();
    private IEnumerable<ProductDTO> productList { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductDTO> ringsList { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductDTO> bandsList { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductDTO> earringsList { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductDTO> pendantsList { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductDTO> braceletsList { get; set; } = new List<ProductDTO>();


    private bool IsLoading { get; set; } = false;
    private int currentPage = 0;
    private int pageSize = 5;
    private MudMessageBox _mudMessageBox;
    private MudDialog BulkAddDialog;
    private string uploadedFilePath = "";
    [Inject]
    public HttpClient Http { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await GetProductPropertyList();
        IsLoading = false;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File == null)
        {
            Snackbar.Add("No file selected.", Severity.Warning);
            return;
        }

        selectedFile = e.File;

        try
        {
            var fileContent = new MultipartFormDataContent();
            var stream = selectedFile.OpenReadStream(5368709120); // 5GB

            var fileStreamContent = new StreamContent(stream);
            fileStreamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");

            fileContent.Add(fileStreamContent, "file", selectedFile.Name);

            var httpClient = new HttpClient();
            var response = await httpClient.PostAsync($"{SD.BaseApiUrl}/api/product/BulkNewProductUpload", fileContent);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Products uploaded successfully!", Severity.Success);
                await GetProductPropertyList(); // Refresh the product list after successful upload
            }
            else
            {
                Snackbar.Add("Failed to upload products. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private bool Search(ProductDTO product)
    {
        return product.ShapeName?.Contains(searchstring, StringComparison.OrdinalIgnoreCase) == true;
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseButton = true };
        Dialog.Show<UploadProductImages>("Show Products", options);
    }

    private void Edit(Guid productId)
    {
        // Implement edit logic here
    }

    private void Delete(Guid productId)
    {
        // Implement delete logic here
    }

    private void OnBulkAddProductClick()
    {
        BulkAddDialog.Show();
    }

    private async Task GetProductPropertyList()
    {
        try
        {
            productList = await Http.GetFromJsonAsync<List<ProductDTO>>($"{SD.BaseApiUrl}/api/Product/GetProductDetailsList");
            ringsList = productList.Where(x => x.CategoryName == "Rings");
            bandsList = productList.Where(x => x.CategoryName == "Bands");
            earringsList = productList.Where(x => x.CategoryName == "Earrings");
            pendantsList = productList.Where(x => x.CategoryName == "Pendants");
            braceletsList = productList.Where(x => x.CategoryName == "Rings");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading product list: {ex.Message}", Severity.Error);
        }
    }

    private void OpenDialogAsync(DialogOptions options)
    {
        Dialog.Show<UploadStyleFile>("Upload Product File (.xls)", options);
    }

    private void OpenImageDialog(List<ProductImageAndVideoDTO> images)
    {
        if (images == null || images.Count == 0)
            return;

        var parameters = new DialogParameters
    {
            { "ImageList", images }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = false,
            CloseButton = true
        };

        Dialog.Show<ProductImageViewer>("Product Images", parameters, options);
    }



}
