@page "/applications/b2b-orders/order-list"

@using Business.Repository
@using Business.Repository.IRepository
@using System.IO
@using Common
@using DataAccess.Entities
@using OfficeOpenXml
@using global::Models

@inject IDialogService Dialog
@inject IB2BOrdersRepository _ordersRepository
@inject ISnackbar Snackbar

<MudTable Elevation="10" Items="b2borderList" Filter="new Func<Orders,bool>(Search)" @bind-category="b2bOrder" Hover="@hower" Dense="@dense">
	<ToolBarContent>
		<MudText Typo="Typo.h6">B2B Order Request List</MudText>
		<MudToolBarSpacer />

		<InputFile OnChange="HandleFileSelected" />
		</ToolBarContent>
	<HeaderContent>
		<MudTh><MudTableSortLabel SortBy="new Func<Orders, object>(x=>x.OrderDate)" InitialDirection="SortDirection.Ascending">Order Date</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Orders, object>(x=>x.OrderCode)">Order Code</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Orders, object>(x=>x.BusinessCode)">Business Account Code</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Orders, object>(x=>x.NoOfQty)">Qty</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Orders, object>(x=>x.NetAmount)">Amount</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<Orders, object>(x=>x.PaymentStatus)">Payment Status</MudTableSortLabel></MudTh>
		<MudTh>Actions</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Name">@context.OrderDate</MudTd>
		<MudTd DataLabel="Category">@context.OrderCode</MudTd>
		<MudTd DataLabel="Carat">@context.BusinessCode</MudTd>
		<MudTd DataLabel="Clarity">@context.NoOfQty</MudTd>
		<MudTd DataLabel="Color">@context.NetAmount</MudTd>
		<MudTd DataLabel="Size">@context.PaymentStatus</MudTd>
		<MudTd>
			<MudFab @onclick="@(() => Edit(context.OrderId))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
			<MudFab @onclick="@(() => Delete(context.OrderId))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
		</MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager PageSizeOptions="new int[]{5,10,20,50,100}" />
	</PagerContent>
</MudTable>

<MudSwitch @bind-Checked="@hower" Color="Color.Primary" Label="Hover" />
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary" Label="Dense" />

<MudMessageBox @ref="_mudMessageBox" Title="Delete" CancelText="Cancel">
	<MessageContent>
		Are you sure you want to delete?
	</MessageContent>
	<YesButton>
		<MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
	</YesButton>
</MudMessageBox>

@code {

	private IBrowserFile selectedFile;
	private IEnumerable<Orders> b2borderList { get; set; } = new List<Orders>();

	private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
	private bool hower = true;
	private bool dense = true;
	private string searchstring = "";

	private Orders b2bOrder = new Orders();

	private bool IsLoading { get; set; } = false;
	private int currentPage = 0;
	private int pageSize = 5;

	private MudMessageBox _mudMessageBox;
	private MudDialog BulkAddDialog;
	private string uploadedFilePath = "";

	protected override async Task OnInitializedAsync()
	{
		IsLoading = true;
		await GetB2BOrderList();
		IsLoading = false;
	}

	private async Task HandleFileSelected(InputFileChangeEventArgs e)
	{
		if (e.File == null)
		{
			Snackbar.Add("No file selected.", Severity.Warning);
			return;
		}

		selectedFile = e.File;

		try
		{
			var fileContent = new MultipartFormDataContent();
			var stream = selectedFile.OpenReadStream(maxAllowedSize: 10_000_000); // Set max size limit (10MB in this case)
			var fileStreamContent = new StreamContent(stream);
			fileStreamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");

			fileContent.Add(fileStreamContent, "file", selectedFile.Name);

			var httpClient = new HttpClient();
			var response = await httpClient.PostAsync($"{SD.BaseApiUrl}/api/product/BulkProductCollectionUpload", fileContent);

			if (response.IsSuccessStatusCode)
			{
				Snackbar.Add("Product collection uploaded successfully!", Severity.Success);
				await GetB2BOrderList(); // Refresh the product list after successful upload
			}
			else
			{
				Snackbar.Add("Failed to upload products. Please try again.", Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error: {ex.Message}", Severity.Error);
		}
	}

	private async Task GetB2BOrderList()
	{
		b2borderList = await _ordersRepository.GetB2BOrderReqs();
	}

	private bool Search(Orders orders)
	{
		return orders.OrderCode?.Contains(searchstring, StringComparison.OrdinalIgnoreCase) == true;
	}

	private void Edit(Guid productId)
	{
		// Implement edit logic here
	}

	private void Delete(Guid productId)
	{
		// Implement delete logic here
	}

	private void OnBulkAddProductClick()
	{
		BulkAddDialog.Show();
	}

}
