@page "/applications/product-property/product-property-list"

@using Business.Repository
@using Business.Repository.IRepository

@inject IProductPropertyRepository _productPropertyRepo
@inject ICategoryRepositry _categoryRepository
@inject ISnackbar Snackbar

<MudCard>
    <MudItem>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Add / Edit Product Property</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudText @bind-Value="productProperty.Id" InputType="InputType.Hidden" ></MudText>
            <MudTextField @bind-Value="productProperty.Name" Placeholder="Please enter product property type."></MudTextField>
            
            <MudTextField @bind-Value="productProperty.ParentId" Placeholder="Please enter parent id."></MudTextField>
            <MudTextField @bind-Value="productProperty.Description" Placeholder="Please enter description."></MudTextField>
            <br/>
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveProductProperty">Save Product Property</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="ClearAll">Clear</MudButton>
        </MudCardContent>
    </MudItem>
</MudCard>

<MudTable Elevation="10" Items="productPropertyList" Filter="new Func<DataAccess.Entities.ProductProperty,bool>(Search)" @bind-category="productProperty" Hover="@hower" Dense="@dense">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Product Property List</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchstring" Placeholder="Search Product Property..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<DataAccess.Entities.ProductProperty, object>(x=>x.Name)" InitialDirection="SortDirection.Ascending"></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<DataAccess.Entities.ProductProperty, object>(x=>x.ParentId)">Parent Property</MudTableSortLabel></MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTh DataLabel="Name">@context.Name</MudTh>
        <MudTh DataLabel="ParentId">@(context.ParentId != null ? context.ParentId : "-")</MudTh>
        <MudTd DataLabel=""> 
            <MudFab @onclick="@(() => Edit(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(() => Delete(context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{5,10,20,50,100}"/>
    </PagerContent>
</MudTable>
<MudSwitch @bind-Checked="@hower" Color="Color.Primary"></MudSwitch>
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary"></MudSwitch>



<MudMessageBox @ref="_mudMessageBox" Title="Delete" CancelText="Cancel">
    <MessageContent>
        Are you sure do you want to delete?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>


@code {
    private bool hower = true;
    private bool dense = true;
    private string searchstring = "";
    private IEnumerable<DataAccess.Entities.Category> Categories { get; set; } = new List<DataAccess.Entities.Category>();
    private DataAccess.Entities.ProductProperty productProperty = new DataAccess.Entities.ProductProperty();
    private IEnumerable<DataAccess.Entities.ProductProperty> productPropertyList { get; set; } = new List<DataAccess.Entities.ProductProperty>();
    private IEnumerable<DataAccess.Entities.ProductProperty> parentPropertyList { get; set; } = new List<DataAccess.Entities.ProductProperty>();
    private bool IsLoading { get; set; } = false;
    private int currentPage = 0;
    private int pageSize = 5;
    private MudMessageBox _mudMessageBox;
    private string _state = "";

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await GetParentDropDownList();
        await GetCategoryList();
        await GetProductPropertyList();
        if (productPropertyList.Count() == 0)
        {
            IsLoading = false;
        }
    }

    private async Task GetProductPropertyList()
    {
        productPropertyList = await _productPropertyRepo.GetProductPropertyList();
    }

    private bool Search(DataAccess.Entities.ProductProperty productProperty)
    {
        if (productProperty.Name != null &&  
            productProperty.ParentId != null &&
            productProperty.Name.Contains(searchstring, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private async Task SaveProductProperty()
    {
        await _productPropertyRepo.SaveProductProperty(productProperty, productProperty.Id);
        productProperty = new DataAccess.Entities.ProductProperty();
        Snackbar.Add("Product Property Type has been saved successfully.", Severity.Success);
        await GetProductPropertyList();
    }

    private async Task Edit(int id){
        productProperty = await _productPropertyRepo.GetProductPropertyById(id);
    }

    private async Task Delete(int id)
    {
        bool? result = await _mudMessageBox.Show();
        _state = result is null ? "Canceled" : "Deleted!";

        if (_state == "Deleted!")
        {
            await _productPropertyRepo.DeleteProductProperty(id);
            Snackbar.Add("Product property type deleted successfully.", Severity.Success);
            await GetProductPropertyList();
        }
    }

    private void ClearAll()
    {
        productProperty = new DataAccess.Entities.ProductProperty();
    }

    private async Task GetParentDropDownList()
    {
        parentPropertyList = await _productPropertyRepo.GetMainPropertyList();
        StateHasChanged(); // Ensure UI updates after data is fetched
    }


    private async Task GetCategoryList()
    {
        Categories = await _categoryRepository.GetCategoryList();
        StateHasChanged();
    }

}
