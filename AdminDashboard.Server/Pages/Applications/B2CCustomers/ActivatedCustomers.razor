@using Business.Repository
@using Business.Repository.IRepository
@using System.IO
@using Common
@using OfficeOpenXml
@using global::Models

@inject IDialogService Dialog
@inject IAccountRepository _accountRepository
@inject ISnackbar Snackbar

<MudTable Elevation="10" Items="customerList" @bind-category="customerRegister" Hover="@hower" Dense="@dense">
	<ToolBarContent>
		<MudText Typo="Typo.h6">Customer List</MudText>
		<MudToolBarSpacer />
	</ToolBarContent>
	<HeaderContent>
		<MudTh><MudTableSortLabel SortBy="new Func<CustomerRegisterDTO, object>(x=>x.FirstName)" InitialDirection="SortDirection.Ascending">First Name</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<CustomerRegisterDTO, object>(x=>x.MiddleName)">Middle Name</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<CustomerRegisterDTO, object>(x=>x.LastName)">Last Name</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<CustomerRegisterDTO, object>(x=>x.EmailId)">Email Id</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<CustomerRegisterDTO, object>(x=>x.PhoneNumber)">Phone Number</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<CustomerRegisterDTO, object>(x=>x.PancardNo)">Pancard No</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<CustomerRegisterDTO, object>(x=>x.AadharCardNo)">Aadhar Card No</MudTableSortLabel></MudTh>
		<MudTh><MudTableSortLabel SortBy="new Func<CustomerRegisterDTO, object>(x=>x.Gender)">Gender</MudTableSortLabel></MudTh>
		<MudTh>Actions</MudTh>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="Name">@context.FirstName</MudTd>
		<MudTd DataLabel="Category">@context.MiddleName</MudTd>
		<MudTd DataLabel="Carat">@context.LastName</MudTd>
		<MudTd DataLabel="Clarity">@context.EmailId</MudTd>
		<MudTd DataLabel="Color">@context.PhoneNumber</MudTd>
		<MudTd DataLabel="Size">@context.PancardNo</MudTd>
		<MudTd DataLabel="Shape">@context.AadharCardNo</MudTd>
		<MudTd DataLabel="Style">@context.Gender</MudTd>
		<MudTd>
			<MudFab @onclick="@(() => Edit(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
			<MudFab @onclick="@(() => Delete(context.Id))" Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
		</MudTd>
	</RowTemplate>
	<PagerContent>
		<MudTablePager PageSizeOptions="new int[]{5,10,20,50,100}" />
	</PagerContent>
</MudTable>

<MudSwitch @bind-Checked="@hower" Color="Color.Primary" Label="Hover" />
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary" Label="Dense" />

<MudMessageBox @ref="_mudMessageBox" Title="Delete" CancelText="Cancel">
	<MessageContent>
		Are you sure you want to delete?
	</MessageContent>
	<YesButton>
		<MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
	</YesButton>
</MudMessageBox>

@code {

	private IBrowserFile selectedFile;
	private IEnumerable<CustomerRegisterDTO> customerList { get; set; } = new List<CustomerRegisterDTO>();

	private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };
	private bool hower = true;
	private bool dense = true;
	private string searchstring = "";

	private CustomerRegisterDTO customerRegister = new CustomerRegisterDTO();

	private bool IsLoading { get; set; } = false;
	private int currentPage = 0;
	private int pageSize = 5;

	private MudMessageBox _mudMessageBox;
	private MudDialog BulkAddDialog;
	private string uploadedFilePath = "";

	protected override async Task OnInitializedAsync()
	{
		IsLoading = true;
		await GetActivatedCustomerList();
		IsLoading = false;
	}

	private async Task HandleFileSelected(InputFileChangeEventArgs e)
	{
		if (e.File == null)
		{
			Snackbar.Add("No file selected.", Severity.Warning);
			return;
		}

		selectedFile = e.File;

		try
		{
			var fileContent = new MultipartFormDataContent();
			var stream = selectedFile.OpenReadStream(maxAllowedSize: 10_000_000); // Set max size limit (10MB in this case)
			var fileStreamContent = new StreamContent(stream);
			fileStreamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");

			fileContent.Add(fileStreamContent, "file", selectedFile.Name);

			var httpClient = new HttpClient();
			var response = await httpClient.PostAsync($"{SD.BaseApiUrl}/api/product/BulkProductCollectionUpload", fileContent);

			if (response.IsSuccessStatusCode)
			{
				Snackbar.Add("Activated customer uploaded successfully!", Severity.Success);
				await GetActivatedCustomerList(); // Refresh the product list after successful upload
			}
			else
			{
				Snackbar.Add("Failed to upload products. Please try again.", Severity.Error);
			}
		}
		catch (Exception ex)
		{
			Snackbar.Add($"Error: {ex.Message}", Severity.Error);
		}
	}

	private async Task GetActivatedCustomerList()
	{
		var customerList = _accountRepository.GetCustomerData();
	}

	private bool Search(ProductDTO product)
	{
		return product.Title?.Contains(searchstring, StringComparison.OrdinalIgnoreCase) == true;
	}

	private void Edit(Guid productId)
	{
		// Implement edit logic here
	}

	private void Delete(Guid productId)
	{
		// Implement delete logic here
	}

	private void OnBulkAddProductClick()
	{
		BulkAddDialog.Show();
	}

}
