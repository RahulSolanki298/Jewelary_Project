@page "/"
@page "/pages/authentication/login"
@layout LoginLayout

@using System.ComponentModel.DataAnnotations
@using AdminDashboard.Server.Service.IService
@using global::Models
@inject HttpClient Http
@inject ISnackbar Snackbar

@inject IAuthenticationService AdminLoginService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager




<div class="login-background">
    <div class="login-wrapper">
        <!-- Image section (only visible on medium+ screens) -->
        <div class="login-image-container">
            <img src="images/_login_process.jpg" class="login-image" alt="Login Illustration" />
        </div>

        <!-- Login form -->
        <div class="login-container">
            <MudCard Class="login-card">
                <EditForm Model="@loginModel" OnValidSubmit="OnValidSubmit">
                    <DataAnnotationsValidator />

                    <MudCardContent>
                        <h5 class="mud-typography mud-typography-h5 text-center mb-4">Sign In</h5>

                        <!-- Social Buttons -->
                        <div class="d-flex justify-content-center gap-2 mb-3">
                            <MudIconButton Icon="@Icons.Material.Filled.Facebook" aria-label="facebook" />
                            <MudIconButton Icon="@Icons.Custom.Brands.Twitter" Color="Color.Primary" aria-label="twitter" />
                        </div>

                        <!-- Error or Loader -->
                        @if (!success)
                        {
                            <div class="text-danger mb-2">@Message</div>
                        }
                        @if (isLoading)
                        {
                            <div class="d-flex justify-content-center mb-2">
                                <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Medium" />
                            </div>
                        }

                        <!-- Inputs -->
                        <MudTextField Label="Email" Variant="Variant.Outlined" FullWidth="true" @bind-Value="loginModel.UserName" />
                        <MudTextField Label="Password" Variant="Variant.Outlined" InputType="InputType.Password" FullWidth="true" @bind-Value="loginModel.Password" />
                        <MudCheckBox @bind-Checked="loginModel.RememberMe" Label="Remember Me" Class="mt-2 mb-2" />

                        <!-- Submit -->
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Size="Size.Large">
                            Login
                        </MudButton>

                        <!-- Forgot Password -->
                        <div class="text-center mt-3">
                            <MudLink Href="/pages/authentication/forgot-password" Color="Color.Primary">Forgot Password?</MudLink>
                        </div>
                    </MudCardContent>
                </EditForm>
            </MudCard>
        </div>
    </div>
</div>


@code {
    private AdminLoginModel loginModel = new AdminLoginModel();
    bool success;
    string Message;
    bool isLoading = false;

    [Inject]
    public IJSRuntime jSRuntime { get; set; }

    private async Task OnValidSubmit(EditContext context)
    {
        isLoading = true;
        success = false;
        Message = string.Empty;
        StateHasChanged();

        try
        {
            var response = await AdminLoginService.AdminSignInAsync(loginModel);

            if (response.IsAuthSuccessful)
            {
                //await jSRuntime.InvokeVoidAsync("localStorage.setItem", "token", response.Token);

                var userId = response.userDTO.Id ?? string.Empty;
                var email = response.userDTO.Email ?? string.Empty;
                var role = response.userDTO.Roles;

                await jSRuntime.InvokeVoidAsync("localStorage.setItem", "userId", userId);
                await jSRuntime.InvokeVoidAsync("localStorage.setItem", "email", email);
                await jSRuntime.InvokeVoidAsync("localStorage.setItem", "role", role);

                success = true;
                NavigationManager.NavigateTo("/personal/dashboard");
            }
            else
            {
                Message = "Invalid Username or Password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Login failed: {ex.Message}");
            Message = "Something went wrong. Please try again later.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

}
