@page "/"
@page "/pages/authentication/login"
@layout LoginLayout
@using Business.Repository.IRepository
@using global::Models
@inject IAccountRepository _userAccountRepo

<MudText Typo="Typo.h4" GutterBottom="true">Sign In</MudText>

@if (!string.IsNullOrEmpty(Message))
{
    <MudText Color="Color.Error">@Message</MudText>
}

<MudText>Don't have an account? <MudLink Href="/pages/authentication/register">Sign Up</MudLink></MudText>

<EditForm Model="customrLoginDt" OnValidSubmit="UserLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <MudTextField @bind-Value="customrLoginDt.Username" Label="E-mail" Variant="Variant.Outlined" Class="my-6" Required="true" />

    <MudTextField @bind-Value="customrLoginDt.Password" Label="Password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" Required="true" />

    <div Class="d-flex justify-space-between align-center">
        <MudCheckBox T="bool" Label="Remember me?" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
        <MudLink Href="/pages/authentication/forgot-password">Forgot password?</MudLink>
    </div>

    @* <MudButton Variant="Variant.Filled" Color="Color.Primary" Type="Submit" Size="Size.Large" FullWidth="true">Sign In</MudButton> *@
    <button type="submit">Sign In</button>
</EditForm>

@code {
    string Message { get; set; } = "";
    CustomerLoginDTO customrLoginDt = new CustomerLoginDTO();

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    // Toggle password visibility
    void TogglePasswordVisibility()
    {
        PasswordVisibility = !PasswordVisibility;
        PasswordInputIcon = PasswordVisibility ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff;
        PasswordInput = PasswordVisibility ? InputType.Text : InputType.Password;
    }

    // User login method
    private async Task UserLogin()
    {
        if (!string.IsNullOrEmpty(customrLoginDt.Username) && !string.IsNullOrEmpty(customrLoginDt.Password))
        {
            try
            {
                var result = await _userAccountRepo.CustomerLoginAsync(customrLoginDt);

                if (result.Succeeded) // Assuming the result is a success flag, change this depending on your actual API response.
                {
                    Message = "Login Successful!";
                }
                else
                {
                    Message = "Invalid credentials. Please try again.";
                }
            }
            catch (Exception ex)
            {
                Message = $"An error occurred: {ex.Message}";
            }
        }
        else
        {
            Message = "Please enter both email and password.";
        }
    }
}
