@using Common

<style>
    .media-container {
        position: relative;
    }

    .product-video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: none;
        z-index: 2;
    }
</style>

<input type="hidden" id="txtShape" value="@ViewBag.ShapeId" />
<section>
    <div class="listingpage">
        <div class="home-giftbanner-main position-relative left-text-banner">
            <a href="#" aria-label="" class="d-block">
                <div class="ole-image-banner thumb text-center ">
                    <img src="~/assets/img/banner/Diamond-Banner.jpg" class="filter-top-image" alt="" title="" />
                </div>
            </a>
        </div>
    </div>
</section>

<!-- Product Section -->
<section class="product-area filter-page-section-padding">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="title font-sans-serif textId">Shop Lab Created Loose Diamonds</h2>
            </div>
        </div>
    </div>
    <hr />
    <div class="container-fluid">
        <div class="card border-1 filter-bg-shadow">
            <div class="card-body" id="filter-box">
                @Html.Partial("_FilterBox")
            </div>
        </div>
    </div>
</section>

<!-- Product Table -->
<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-md-12 text-center">
            <div class="row">
                <div class="col-xl-12">
                    <div id="loader-overlay">
                        <div class="text-center" id="txtLoader">
                            <img src="~/assets/loader/JF-WEB-LOADER.gif" style="width:100px;">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="" id="diamond-list-container">
    </div>
    <div class="row p-4">
        <div class="col-xl-12 text-center">
            <button id="showMoreBtn" class="btn btn-dark text-capitalize">Show More</button>
        </div>
    </div>
    <div class="modal fade" id="dimCertiModal" tabindex="-1" role="dialog" data-keyboard="false" data-backdrop="static" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog" style="max-width:100% !important">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title fw-bold" id="dimCertiLabel">
                        🧾 Diamond Certificate
                    </h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close" id="btnCertiClose"><span aria-hidden="true">×</span></button>
                </div>
                <div class="modal-body" id="SearchItemArea">
                    <div class="container-fluid">
                        <iframe id="certIframe"
                                src=""
                                allowfullscreen=""
                                style="width:100%; height:100vh; border:none;"></iframe>
                    </div>

                </div>
            </div>
        </div>
    </div>

</div>


<!-- Model Add -->
<!-- Modal -->
<div class="modal fade" id="compareDiamondsModal" tabindex="-1" aria-labelledby="compareDiamondsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <!-- modal-lg for medium size -->
        <div class="modal-content">
            <div class="modal-header" style="display:block !important;padding:10px 0px;">
                <div class="row">
                    <div class="col-xl-11 col-md-11 col-lg-11">
                        <h3 class="modal-title text-center" id="compareDiamondsModalLabel">Compare Diamonds</h3>
                    </div>
                    <div class="col-xl-1 col-md-1 col-lg-1">
                        <button type="button" class="btn-danger text-center" data-bs-dismiss="modal" aria-label="Close">X</button>
                    </div>
                </div>
            </div>
            <div class="modal-body">
                <div id="diamondComparisonContent">
                </div>
            </div>
        </div>
    </div>
</div>




@section Scripts
{

    <script>
            var page=1;
            var rangeVal=10;
            var selectedLabs = [];
            let selectedCheckboxes = [];
            var txtShape = $("#txtShape").val();

            // Initialize filters
            const getValue = id => $(id).val() || '';
            const getArrayValue = id => $(id).val() || [];
            var selectedDiamonds = JSON.parse(localStorage.getItem('selectedDiamonds')) || [];
            let suppressAutoLoad = false;

            var diamondFilters = {
                    Colors: getValue('#txtColorIds'),
                    FromCarat: getValue('#minCarat'),
                    ToCarat: getValue('#maxCarat'),
                    Shapes: getArrayValue('#shapes'),
                    Clarities: getValue('#txtClarityIds'),
                    FromPrice: getValue('#minPrice'),
                    ToPrice: getValue('#maxPrice'),
                    Cuts: getValue('#txtCutIds'),
                    FromRatio: getValue('#minLWRatio'),
                    ToRatio: getValue('#maxLWRatio'),
                    FromTable: getValue('#minTablePer'),
                    ToTable: getValue('#maxTablePer'),
                    FromDepth: getValue('#minDepthPer'),
                    ToDepth: getValue('#maxDepthPer'),
                    Polish: getValue('#txtPolishIds'),
                    Fluor: getValue('#txtFluorIds'),
                    Symmeties: getValue('#txtSymmetyIds'),
                    LabNames:getValue('#txtLabNames'),
                };

            function showLoader() {
                    $('#txtLoader').show(); // This shows the loader
                }

            // Function to hide the loader
            function hideLoader() {
                    $('#txtLoader').hide(); // This hides the loader
                }

            $(function () {
                // Initial Data Fetch
                loadAllFunctions();
                resetCheckBox();
                getWishlistCounter();
                updateWishlistUI();

                $("#shape-list").on("click", ".shape-btn", function () {
                    const shapeId = $(this).attr('shapeId');
                    $(this).toggleClass('selected');

                    if ($(this).hasClass('selected')) {
                        if (!diamondFilters.Shapes.includes(shapeId)) {
                            diamondFilters.Shapes.push(shapeId);
                        }
                    } else {
                        const index = diamondFilters.Shapes.indexOf(shapeId);
                        if (index !== -1) diamondFilters.Shapes.splice(index, 1);
                    }
                    console.log(diamondFilters);
                    getDiamondDataList(diamondFilters, page, rangeVal);
                });

                $("#btnMoreFilter").click(() => {
                    $("#divMoreFilter").show();
                    $("#btnLessFilter").show();
                    $("#btnMoreFilter").hide();
                });

                $("#btnLessFilter").click(() => {
                    $("#divMoreFilter").hide();
                    $("#btnLessFilter").hide();
                    $("#btnMoreFilter").show();
                });

                $('#showMoreBtn').click(() => {
                    rangeVal += 10;
                    getDiamondDataList(diamondFilters, page, rangeVal); // Reload the table with new page size
                });

                $("#btnReset").on("click", function () {
                    ResetAllData();
                });

                $("#chkGIA, #chkIGI").on("click", function () {
                    var isGIAChecked = $('#chkGIA').is(':checked');
                    var isIGIChecked = $('#chkIGI').is(':checked');

                    if (isGIAChecked && !selectedLabs.includes('GIA')) {
                        selectedLabs.push('GIA');
                    } else if (!isGIAChecked) {
                        selectedLabs = selectedLabs.filter(function (lab) {
                            return lab !== 'GIA';
                        });
                    }

                    if (isIGIChecked && !selectedLabs.includes('IGI')) {
                        selectedLabs.push('IGI');
                    } else if (!isIGIChecked) {
                        selectedLabs = selectedLabs.filter(function (lab) {
                            return lab !== 'IGI';
                        });
                    }

                    diamondFilters.LabNames = selectedLabs;
                    getDiamondDataList(diamondFilters, page, rangeVal);
                });

                function initSlider(selector, options) {
                    $(selector).slider({
                        range: true,
                        ...options
                    });
                }

                initSlider("#price-slider", {
                    min: 500, max: 50000, step: 0.01, values: [5000, 30000],
                    slide: (e, ui) => {
                        $("#minPrice").val("$" + ui.values[0]);
                        $("#maxPrice").val("$" + ui.values[1]);
                    }
                });

                $("#btnViewAll").on("click", function () {
                    ResetAllData();
                });


                $("#btnCertiClose").click(function () {
                    $("#dimCertiModal").modal("hide");
                });

                updateSelectedDiamondCount();

                $('#diamond-list-container').on('change', "#diamondTable tbody input[type='checkbox']", function () {
                    let checkbox = $(this);
                    let diamondId = checkbox.attr('diamondId');

                    if (checkbox.is(':checked')) {
                        selectedDiamonds.push(diamondId);

                        if (selectedDiamonds.length > 3) {
                            selectedDiamonds.shift();
                            let firstCheckbox = selectedCheckboxes.shift();
                            firstCheckbox.prop('checked', false);
                        }
                    } else {
                        selectedCheckboxes = selectedCheckboxes.filter(cb => cb[0] !== checkbox[0]);
                        selectedDiamonds = selectedDiamonds.filter(id => id !== diamondId);
                    }

                    localStorage.setItem('selectedDiamonds', JSON.stringify(selectedDiamonds));
                    selectedDiamonds = JSON.parse(localStorage.getItem('selectedDiamonds')) || [];
                    updateSelectedDiamondCount();
                    resetCheckBox();
                });

                $("#diamond-list-container").on("click", "#diamondTable .wishlist-toggle", function () {

                    let diamondId = $(this).data("diamondid");
                    let wishlist = JSON.parse(localStorage.getItem("wishlist")) || [];

                    if (wishlist.includes(diamondId)) {
                        wishlist = wishlist.filter(id => id !== diamondId);
                        localStorage.setItem("wishlist", JSON.stringify(wishlist));
                        $(this).find(".heart-unchecked").show();
                        $(this).find(".heart-checked").hide();

                        
                        toastr.warning("Product has been removed from your wishlist.");

                    } else {
                        wishlist.push(diamondId);
                        localStorage.setItem("wishlist", JSON.stringify(wishlist));
                        $(this).find(".heart-unchecked").hide();
                        $(this).find(".heart-checked").show();
                        //alert("Product has been added to your wishlist.");


                        toastr.success("Product has been added to your wishlist.");

                    }

                    getWishlistCounter();
                   // updateWishlistUI();
            });

                $("#btnCompareDiamonds").on("click", function () {
                    
                    selectedDiamonds = JSON.parse(localStorage.getItem('selectedDiamonds')) || [];
                    if (selectedDiamonds.length > 0) {
                        $.ajax({
                            url: '@Url.Action("GetDiamondsByIds", "Diamond")',
                            type: 'GET',
                            data: {
                                diamondIds: selectedDiamonds.join(',')
                            },
                            success: function (data) {
                                console.log(data);
                                $("#diamondComparisonContent").html('');
                                $("#diamondComparisonContent").html(data);
                                $("#compareDiamondsModal").modal("show");
                            },
                            error: function (error) {
                                console.error('Error fetching data:', error);
                            }
                        });

                    }
                    else
                    {
                        //alert("Please select at least one diamond to compare.");
                        toastr.warning("Please select at least one diamond to compare.");
                    }


                });

                $("#diamondComparisonContent").on("change", ".compare-diamond-id", function () {

                    let checkbox = $(this);
                    let diamondId = checkbox.val();
                    let card = checkbox.closest(".col-4");  // Ensure you're getting the correct .col-4 card

                    if (checkbox.is(':checked')) {
                        if (!selectedDiamonds.includes(diamondId)) {
                            selectedDiamonds.push(diamondId);
                        }
                    } else {
                        selectedDiamonds = selectedDiamonds.filter(id => id !== diamondId);
                        card.fadeOut(300, function() {
                            card.remove();  // Fade out and remove the specific card
                        });
                    }

                    localStorage.setItem('selectedDiamonds', JSON.stringify(selectedDiamonds));
                    updateSelectedDiamondCount();
                    resetSelectedCheckBox(diamondId);
            });

            $("#diamondComparisonContent").on("click", ".btnWishlist", function ()
            {
                    let diamondId = $(this).data('diamondid').toString(); // Convert to string

                    let wishlist = JSON.parse(localStorage.getItem("wishlist")) || [];

                    if (!wishlist.includes(diamondId)) {
                        wishlist.push(diamondId); // Add
                        localStorage.setItem("wishlist", JSON.stringify(wishlist)); // Save
                        //alert("Added to wishlist!");
                        toastr.success("Product has been added to your wishlist.");
                        getWishlistCounter(); // Optional: Update UI
                    } else {
                        //alert("This diamond is already in your wishlist.");
                        toastr.warning("Product already in your wishlist..");
                    }
                    updateWishlistUI();
                });
            });

        $(document).on("click", ".clsCertificate", function (e) {
                e.preventDefault();

                var certUrl = $(this).data("certi"); // get value from data-certi attribute
                if (certUrl) {
                    $("#certIframe").attr("src", certUrl);
                    $("#dimCertiModal").modal("show");
                }
            });

        function GetShapeDesign() {
                const $shapeListContainer = $('#filter-box #shape-list');

                $.ajax({
                    url: '@Url.Action("GetShapeList", "Diamond")',
                    method: 'GET',
                    success: function (htmlContent) {
                        $shapeListContainer.html("");
                        $shapeListContainer.html(htmlContent);
                    },
                    error: function () {
                        console.error('Error fetching shape data');
                        $shapeListContainer.html('<p>Failed to load shapes</p>');
                    }
                });
            }

        async function GetColorData() {
                    try {
                        var response = await $.ajax({
                            url:'@Url.Action("GetColorList", "Diamond")',
                            method: 'GET',
                            dataType: 'json',
                        });

                        const colorList = response;

                        if (colorList.length === 0) {
                            console.warn('No colors available');
                            return;
                        }

                        const StepCount = 1;

                        $("#color-slider").slider({
                            range: true,
                            min: 0,
                            max: colorList.length - 1,
                            step: StepCount,
                            values: [0, colorList.length - 1],

                            slide: function (event, ui) {
                                const startIndex = ui.values[0];
                                const endIndex = ui.values[1];

                                const minColor = colorList[startIndex];
                                const maxColor = colorList[endIndex];

                                $("#minColor").val(minColor.name);
                                $("#maxColor").val(maxColor.name);


                                const selectedColorIds = colorList
                                    .slice(startIndex, endIndex + 1)
                                    .map(item => item.id);

                                $("#txtColorIds").val(selectedColorIds.join(','));

                                diamondFilters.Colors = $("#txtColorIds").val();
                                console.log(diamondFilters.Colors);

                                //getDiamondDataList(diamondFilters, page, rangeVal);
                            }
                            , change: function (event, ui) {
                                if (suppressAutoLoad) return;
                                 const startIndex = ui.values[0];
                                 const endIndex = ui.values[1];

                                 const minColor = colorList[startIndex];
                                 const maxColor = colorList[endIndex];

                                 $("#minColor").val(minColor.name);
                                 $("#maxColor").val(maxColor.name);


                                 const selectedColorIds = colorList
                                     .slice(startIndex, endIndex + 1)
                                     .map(item => item.id);

                                 $("#txtColorIds").val(selectedColorIds.join(','));

                                 diamondFilters.Colors = $("#txtColorIds").val();
                                 console.log(diamondFilters.Colors);

                                 getDiamondDataList(diamondFilters, page, rangeVal);
                             }
                        });

                    // Set initial values
                    $("#minColor").val(colorList[0].name);
                    $("#maxColor").val(colorList[colorList.length - 1].name);

                        const initialColorIds = colorList.map(item => item.id);
                        $("#txtColorIds").val(initialColorIds.join(','));
                        diamondFilters.Colors = $("#txtColorIds").val();

                } catch (error) {
                    console.error('Error fetching data: ', error);
                    $('#filter-box #color-slider').html('<p>Failed to load colors</p>');
                }
            }

        async function GetCutData() {
            
                try {
                    const response = await $.ajax({
                        url:'@Url.Action("GetCutList", "Diamond")',
                        method: 'GET',
                        dataType: 'json'
                    });

                    if (!Array.isArray(response) || response.length === 0) {
                        console.warn('No cuts available');
                        $('#filter-box #Cut-slider').html('<p>No cuts available</p>');
                        return;
                    }

                    const cutList = response;

                    $("#Cut-slider").slider({
                        range: true,
                        min: 0,
                        max: cutList.length - 1,
                        step: 1,
                        values: [0, cutList.length - 1],
                        slide: function (event, ui) {
                            const startIndex = ui.values[0];
                            const endIndex = ui.values[1];

                            const minCut = cutList[startIndex];
                            const maxCut = cutList[endIndex];

                            $("#minCut").val(minCut.name);
                            $("#maxCut").val(maxCut.name);

                            const selectedCutIds = cutList
                                .slice(startIndex, endIndex + 1)
                                .map(item => item.id);

                            $("#txtCutIds").val(selectedCutIds.join(','));

                            // Update filter object
                            diamondFilters.Cuts = $("#txtCutIds").val();
                            console.log(diamondFilters.Cuts);

                            // Call filter
                            //getDiamondDataList(diamondFilters, page, rangeVal);
                        }
                        , change: function (event, ui) {
                            if (suppressAutoLoad) return;

                             const startindex = ui.values[0];
                             const endindex = ui.values[1];

                            const mincut = cutList[startindex];
                            const maxcut = cutList[endindex];

                             $("#mincut").val(mincut.name);
                             $("#maxcut").val(maxcut.name);

                            const selectedcutids = cutList
                                 .slice(startindex, endindex + 1)
                                 .map(item => item.id);

                             $("#txtcutids").val(selectedcutids.join(','));

                             // update filter object
                             diamondfilters.cuts = $("#txtcutids").val();
                             console.log(diamondfilters.cuts);

                             // call filter
                             getdiamonddatalist(diamondfilters, page, rangeval);
                         }
                    });

                    $("#minCut").val(cutList[0].name);
                    $("#maxCut").val(cutList[cutList.length - 1].name);

                    const initialCutIds = cutList.map(item => item.id);
                    $("#txtCutIds").val(initialCutIds.join(','));

                    diamondFilters.Cuts = $("#txtCutIds").val();

                } catch (error) {
                    console.error('Error fetching cut data:', error);
                    $('#filter-box #cut-slider').html('<p>Failed to load cuts</p>');
                }
            }

        async function GetClarityData() {
                try {
                    const response = await $.ajax({
                        url:'@Url.Action("GetClarityList", "Diamond")',
                        method: 'GET',
                        dataType: 'json'
                    });

                    if (!Array.isArray(response) || response.length === 0) {
                        console.warn('No clarity available');
                        $('#filter-box #Clarity-slider').html('<p>No clarity available</p>');
                        return;
                    }

                    const clarityList = response;

                    $("#Clarity-slider").slider({
                        range: true,
                        min: 0,
                        max: clarityList.length - 1,
                        step: 1,
                        values: [0, clarityList.length - 1],
                        slide: function (event, ui) {
                            const fromIndex = ui.values[0];
                            const toIndex = ui.values[1];

                            const fromClarity = clarityList[fromIndex];
                            const toClarity = clarityList[toIndex];

                            $("#minClarity").val(fromClarity.name);
                            $("#maxClarity").val(toClarity.name);

                            const selectedClarityIds = clarityList
                                .slice(fromIndex, toIndex + 1)
                                .map(item => item.id);

                            $("#txtClarityIds").val(selectedClarityIds.join(','));

                            diamondFilters.Clarities = $("#txtClarityIds").val();
                            console.log(diamondFilters.Clarities);

                            //getDiamondDataList(diamondFilters, page, rangeVal);
                        }
                        , change: function (event, ui) {
                            if (suppressAutoLoad) return;
                             const fromIndex = ui.values[0];
                             const toIndex = ui.values[1];

                             const fromClarity = clarityList[fromIndex];
                             const toClarity = clarityList[toIndex];

                             $("#minClarity").val(fromClarity.name);
                             $("#maxClarity").val(toClarity.name);

                             const selectedClarityIds = clarityList
                                 .slice(fromIndex, toIndex + 1)
                                 .map(item => item.id);

                             $("#txtClarityIds").val(selectedClarityIds.join(','));

                             diamondFilters.Clarities = $("#txtClarityIds").val();
                             console.log(diamondFilters.Clarities);

                             getDiamondDataList(diamondFilters, page, rangeVal);
                         }
                    });

                    // Set initial display
                    $("#minClarity").val(clarityList[0].name);
                    $("#maxClarity").val(clarityList[clarityList.length - 1].name);

                    // Set all clarity Ids initially
                    const initialClarityIds = clarityList.map(item => item.id);
                    $("#txtClarityIds").val(initialClarityIds.join(','));
                    diamondFilters.Clarities = $("#txtClarityIds").val();

                } catch (error) {
                    console.error('Error fetching clarity data: ', error);
                    $('#filter-box #Clarity-slider').html('<p>Failed to load clarity</p>');
                }
            }

        async function GetPolishData() {
             try {
                    // Fetching data from API
                    const response = await $.ajax({
                        url: '@Url.Action("GetPolishList", "Diamond")',
                        method: 'GET',
                        dataType: 'json'
                    });

                    // Check for valid response
                    if (!Array.isArray(response) || response.length === 0) {
                        console.warn('No polish data found.');
                        $('#filter-box #Polish-slider').html('<p>No polish available</p>');
                        return;
                    }

                    const polishList = response;

                    $("#Polish-slider").slider({
                        range: true,
                        min: 0,
                        max: polishList.length - 1,
                        step: 1,
                        values: [0, polishList.length - 1],
                        slide: function (event, ui) {
                            const fromIndex = ui.values[0];
                            const toIndex = ui.values[1];

                            const fromPolish = polishList[fromIndex];
                            const toPolish = polishList[toIndex];

                            $("#minPolish").val(fromPolish.name);
                            $("#maxPolish").val(toPolish.name);

                            const selectedPolishIds = polishList
                                .slice(fromIndex, toIndex + 1)
                                .map(item => item.id);

                            $("#txtPolishIds").val(selectedPolishIds.join(','));
                            diamondFilters.Polish = $("#txtPolishIds").val();

                            //getDiamondDataList(diamondFilters, page, rangeVal);
                        }
                        , change: function (event, ui) {
                            if (suppressAutoLoad) return;
                             const fromIndex = ui.values[0];
                             const toIndex = ui.values[1];

                             const fromPolish = polishList[fromIndex];
                             const toPolish = polishList[toIndex];

                             $("#minPolish").val(fromPolish.name);
                             $("#maxPolish").val(toPolish.name);

                             const selectedPolishIds = polishList
                                 .slice(fromIndex, toIndex + 1)
                                 .map(item => item.id);

                             $("#txtPolishIds").val(selectedPolishIds.join(','));
                             diamondFilters.Polish = $("#txtPolishIds").val();

                             getDiamondDataList(diamondFilters, page, rangeVal);
                         }
                    });

                    // Set initial values
                    $("#minPolish").val(polishList[0].name);
                    $("#maxPolish").val(polishList[polishList.length - 1].name);

                    const initialPolishIds = polishList.map(item => item.id);
                    $("#txtPolishIds").val(initialPolishIds.join(','));
                    diamondFilters.Polish = $("#txtPolishIds").val();

                    // Initial load
                    //getDiamondDataList(diamondFilters, page, rangeVal);

            } catch (error) {
                    console.error('Error fetching data: ', error);
                    $('#filter-box #price-list').html('<p>Failed to load price ranges</p>');
            }
        }

        async function GetTableData() {
                try {
                    const response = await $.ajax({
                      url: '@Url.Action("GetTableRanges", "Diamond")',
                      method: 'GET', // GET request
                      dataType: 'json', // Expecting JSON response
                    });

                    if (!response || typeof response.maxValue !== 'number') {
                      throw new Error('Invalid response structure');
                    }

                    const maxValue = response.maxValue;



                    $("#TablePer-slider").slider({
                      range: true,
                      min: 0,
                      max: maxValue,
                      step: 0.1,
                      values: [0, maxValue],
                      slide: function (event, ui) {
                        $("#minTablePer").val(ui.values[0]);
                        $("#maxTablePer").val(ui.values[1]);

                        diamondFilters.FromTable = ui.values[0];
                        diamondFilters.ToTable = ui.values[1];

                      // getDiamondDataList(diamondFilters, page, rangeVal);
                      }
                        , change: function (event, ui) {
                            if (suppressAutoLoad) return;
                         $("#minTablePer").val(ui.values[0]);
                         $("#maxTablePer").val(ui.values[1]);

                         diamondFilters.FromTable = ui.values[0];
                         diamondFilters.ToTable = ui.values[1];

                         getDiamondDataList(diamondFilters, page, rangeVal);
                       }
                    });

                    $("#minTablePer").val(0);
                    $("#maxTablePer").val(maxValue);
                    diamondFilters.FromTable = $("#minTablePer").val();
                    diamondFilters.ToTable = $("#maxTablePer").val();

                  } catch (error) {
                    console.error('Error fetching data:', error);
                    $('#filter-box #table-list').html('<p>Failed to load table ranges</p>');
                  }
            }

        async function GetDepthData() {
            
                    try {
                        // Fetching price data from the API
                        const response = await $.ajax({
                              url: '@Url.Action("GetDepthRanges", "Diamond")',
                              method: 'GET', // GET request
                              dataType: 'json', // Expecting JSON response
                            });

                        // Ensure the response contains MaxPrice
                        if (!response || typeof response.maxValue !== 'number') {
                          throw new Error('Invalid response structure');
                        }

                            const maxValue = response.maxValue;

                        // Initialize the price slider
                            $("#DepthPer-slider").slider({
                              range: true,
                              min: 0, // Minimum price is 0
                              max: maxValue, // Set maximum from API response
                              step: 0.1, // Step size for the slider
                              values: [0, maxValue], // Default values
                              slide: function (event, ui) {
                                // Update the min and max price input fields dynamically
                                    $("#minDepthPer").val(ui.values[0]);
                                    $("#maxDepthPer").val(ui.values[1]);

                                diamondFilters.FromDepth = ui.values[0];
                                diamondFilters.ToDepth = ui.values[1];

                                //getDiamondDataList(diamondFilters, page, rangeVal);
                              }
                                , change: function (event, ui) {
                                    if (suppressAutoLoad) return;
                                 // Update the min and max price input fields dynamically
                                     $("#minDepthPer").val(ui.values[0]);
                                     $("#maxDepthPer").val(ui.values[1]);

                                 diamondFilters.FromDepth = ui.values[0];
                                 diamondFilters.ToDepth = ui.values[1];

                                 getDiamondDataList(diamondFilters, page, rangeVal);
                               }
                            });

                        // Set initial values for the price input fields
                        $("#minDepthPer").val(0);
                        $("#maxDepthPer").val(maxValue);
                        diamondFilters.FromDepth = $("#minDepthPer").val();
                        diamondFilters.ToDepth = $("#maxDepthPer").val();
                        //getDiamondDataList(diamondFilters, page, rangeVal);

                    } catch (error) {
                        // Handle any errors during the API request or slider setup
                        console.error('Error fetching data: ', error);
                            $('#filter-box #DepthPer-list').html('<p>Failed to load depth ranges</p>');
                    }
            }

        async function GetRatioData() {

                try {
                    const response = await $.ajax({
                        url: '@Url.Action("GetRatioRanges", "Diamond")',
                        method: 'GET',
                        dataType: 'json'
                    });

                    // Validate response structure
                    if (!response || typeof response.maxValue !== 'number' || typeof response.minValue !== 'number') {
                        throw new Error('Invalid response structure');
                    }

                    // Set default input values
                    $("#minLWRatio").val(response.minValue);
                    $("#maxLWRatio").val(response.maxValue);

                    // Set initial filter values
                    diamondFilters.FromRatio = response.minValue;
                    diamondFilters.ToRatio = response.maxValue;

                    // Initialize jQuery UI Slider
                    $("#LWRatio-slider").slider({
                        range: true,
                        min: response.minValue,
                        max: response.maxValue,
                        step: 0.1,
                        values: [response.minValue, response.maxValue],
                        slide: function (event, ui) {
                            $("#minLWRatio").val(ui.values[0]);
                            $("#maxLWRatio").val(ui.values[1]);

                            diamondFilters.FromRatio = ui.values[0];
                            diamondFilters.ToRatio = ui.values[1];

                            //getDiamondDataList(diamondFilters, page, rangeVal);
                        }
                        , change: function (event, ui) {
                            if (suppressAutoLoad) return;
                             $("#minLWRatio").val(ui.values[0]);
                             $("#maxLWRatio").val(ui.values[1]);

                             diamondFilters.FromRatio = ui.values[0];
                             diamondFilters.ToRatio = ui.values[1];

                             getDiamondDataList(diamondFilters, page, rangeVal);
                         }
                    });

                } catch (error) {
                    console.error('Error fetching ratio data: ', error);
                    $('#filter-box #LWRatio-slider').html('<p>Failed to load ratio</p>');
        }
            }

        function updateSelectedDiamondCount() {
                $('#filter-box #proCounter').text('(' + selectedDiamonds.length+')');
            }

        async function GetFluorData() {

                try {
                    // Fetching data from API
                    const response = await $.ajax({
                        url: '@Url.Action("GetFluorList", "Diamond")',
                        method: 'GET',
                        dataType: 'json'
                    });

                    // Validate response
                    if (!Array.isArray(response) || response.length === 0) {
                        console.warn('No fluor data found.');
                        $('#filter-box #Fluor-slider').html('<p>No fluor available</p>');
                        return;
                    }

                    const fluorList = response;

                    $("#Fluor-slider").slider({
                        range: true,
                        min: 0,
                        max: fluorList.length - 1,
                        step: 1,
                        values: [0, fluorList.length - 1],
                        slide: function (event, ui) {
                            const fromIndex = ui.values[0];
                            const toIndex = ui.values[1];

                            const fromFluor = fluorList[fromIndex];
                            const toFluor = fluorList[toIndex];

                            $("#minFluor").val(fromFluor.name);
                            $("#maxFluor").val(toFluor.name);

                            const selectedFluorIds = fluorList
                                .slice(fromIndex, toIndex + 1)
                                .map(item => item.id);

                            $("#txtFluorIds").val(selectedFluorIds.join(','));
                            diamondFilters.Fluor= $("#txtFluorIds").val();

                            //getDiamondDataList(diamondFilters, page, rangeVal);
                        }
                        , change: function (event, ui) {
                            if (suppressAutoLoad) return;
                             const fromIndex = ui.values[0];
                             const toIndex = ui.values[1];

                             const fromFluor = fluorList[fromIndex];
                             const toFluor = fluorList[toIndex];

                             $("#minFluor").val(fromFluor.name);
                             $("#maxFluor").val(toFluor.name);

                             const selectedFluorIds = fluorList
                                 .slice(fromIndex, toIndex + 1)
                                 .map(item => item.id);

                             $("#txtFluorIds").val(selectedFluorIds.join(','));
                             diamondFilters.Fluor= $("#txtFluorIds").val();

                             getDiamondDataList(diamondFilters, page, rangeVal);
                         }
                    });

                    // Set initial values
                    $("#minFluor").val(fluorList[0].name);
                    $("#maxFluor").val(fluorList[fluorList.length - 1].name);

                    const initialFluorIds = fluorList.map(item => item.id);
                    $("#txtFluorIds").val(initialFluorIds.join(','));
                    diamondFilters.Fluor = $("#txtFluorIds").val();

                    //getDiamondDataList(diamondFilters, page, rangeVal);

                } catch (error) {
                    console.error('Error fetching fluor data: ', error);
                    $('#filter-box #Fluor-slider').html('<p>Failed to load fluor</p>');
                }
            }

        async function GetSymmetryData() {
                try {
                    // Fetching data from API
                    const response = await $.ajax({
                        url: '@Url.Action("GetSymmetryList", "Diamond")',
                        method: 'GET',
                        dataType: 'json',
                    });

                    // Validate response
                    if (!Array.isArray(response) || response.length === 0) {
                        console.warn('No symmetry data found.');
                        $('#filter-box #Symmetry-slider').html('<p>No symmetry available</p>');
                        return;
                    }

                    const symmetryList = response;

                    $("#Symmetry-slider").slider({
                        range: true,
                        min: 0,
                        max: symmetryList.length - 1,
                        step: 1,
                        values: [0, symmetryList.length - 1],
                        slide: function (event, ui) {
                            const fromIndex = ui.values[0];
                            const toIndex = ui.values[1];

                            const fromSym = symmetryList[fromIndex];
                            const toSym = symmetryList[toIndex];

                            $("#minSymmetry").val(fromSym.name);
                            $("#maxSymmetry").val(toSym.name);

                            const selectedSymmetryIds = symmetryList
                                .slice(fromIndex, toIndex + 1)
                                .map(item => item.id);

                            $("#txtSymmetryIds").val(selectedSymmetryIds.join(','));
                            diamondFilters.Symmeties = selectedSymmetryIds.join(',');

                           //getDiamondDataList(diamondFilters, page, rangeVal);
                        }
                        , change: function (event, ui) {
                            if (suppressAutoLoad) return;
                             const fromIndex = ui.values[0];
                             const toIndex = ui.values[1];

                             const fromSym = symmetryList[fromIndex];
                             const toSym = symmetryList[toIndex];

                             $("#minSymmetry").val(fromSym.name);
                             $("#maxSymmetry").val(toSym.name);

                             const selectedSymmetryIds = symmetryList
                                 .slice(fromIndex, toIndex + 1)
                                 .map(item => item.id);

                             $("#txtSymmetryIds").val(selectedSymmetryIds.join(','));
                             diamondFilters.Symmeties = selectedSymmetryIds.join(',');

                             getDiamondDataList(diamondFilters, page, rangeVal);
                         }
                    });

                    $("#minSymmetry").val(symmetryList[0].name);
                    $("#maxSymmetry").val(symmetryList[symmetryList.length - 1].name);

                    const initialSymmetryIds = symmetryList.map(item => item.id);
                    $("#txtSymmetryIds").val(initialSymmetryIds.join(','));
                    diamondFilters.Symmeties = initialSymmetryIds.join(',');

                    //getDiamondDataList(diamondFilters, page, rangeVal);

                } catch (error) {
                    console.error('Error fetching symmetry data: ', error);
                    $('#filter-box #Symmetry-slider').html('<p>Failed to load symmetry</p>');
                }
            }

        async function GetPriceData()
            {
                        try {
                                // Fetching price data from the API
                                const response = await $.ajax({
                                  url: '@Url.Action("GetPriceRange", "Diamond")',
                                  method: 'GET', // GET request
                                  dataType: 'json', // Expecting JSON response
                                });

                                // Ensure the response contains MaxPrice
                                if (!response || typeof response.maxPrice !== 'number') {
                                  throw new Error('Invalid response structure');
                                }

                                const maxPrice = response.maxPrice;
                                const minPrice = response.minPrice;

                                // Initialize the price slider
                                $("#price-slider").slider({
                                  range: true,
                                  min: minPrice, // Minimum price is 0
                                  max: maxPrice, // Set maximum from API response
                                  step: 0.1, // Step size for the slider
                                  values: [minPrice, maxPrice], // Default values
                                  slide: function (event, ui) {
                                    $("#minPrice").val(ui.values[0]);
                                    $("#maxPrice").val(ui.values[1]);

                                    diamondFilters.FromPrice=ui.values[0];
                                    diamondFilters.ToPrice=ui.values[1];

                                   // getDiamondDataList(diamondFilters,page,rangeVal);

                                  }
                                    , change: function (event, ui) {
                                        if (suppressAutoLoad) return;
                                     $("#minPrice").val(ui.values[0]);
                                     $("#maxPrice").val(ui.values[1]);

                                     diamondFilters.FromPrice=ui.values[0];
                                     diamondFilters.ToPrice=ui.values[1];

                                     getDiamondDataList(diamondFilters,page,rangeVal);

                                   }
                                });

                                // Set initial values for the price input fields
                                $("#minPrice").val(minPrice);
                                $("#maxPrice").val(maxPrice);
                                diamondFilters.FromPrice = $("#minPrice").val();
                                diamondFilters.ToPrice = $("#maxPrice").val();
                              }
                              catch (error) {
                                // Handle any errors during the API request or slider setup
                                console.error('Error fetching data: ', error);
                                $('#filter-box #price-list').html('<p>Failed to load price ranges</p>');
                              }
            }

        async function getDiamondDataList(diamondFilters, pageNumber = 1, pageSize = 10) {
            showLoader();

            try {
                const data = await $.ajax({
                    url: '@Url.Action("GetDiamondListByFilter", "Diamond")',
                    type: 'POST',
                    data: {
                        diamondFilters: diamondFilters,
                        pageNumber: pageNumber,
                        pageSize: pageSize
                    }
                });

                $('#diamond-list-container').html('');
                $('#diamond-list-container').html(data);
                resetCheckBox();
                updateWishlistUI();
                hideLoader();

                return data; // Optional: return the data if needed elsewhere
            } catch (error) {
                console.error('Error fetching data:', error);
                hideLoader();
                return null;
            }
        }
        

        async function loadAllFunctions() {
            
                        showLoader();
                        try {
                            await Promise.all([
                                GetShapeDesign(),
                                GetCarat(),
                                GetCutData(),
                                GetColorData(),
                                GetClarityData(),
                                GetPriceData(),
                                GetPolishData(),
                                GetFluorData(),
                                GetSymmetryData(),
                                GetTableData(),
                                GetDepthData(),
                                GetRatioData()

                            ]);
                            if (selectedLabs.length === 0) {
                                selectedLabs.push('GIA', 'IGI');
                            }
                            diamondFilters.LabNames = selectedLabs;
                            //if (txtShape != null && txtShape != undefined && txtShape != "" && txtShape != '0') {
                            //    if (!diamondFilters.Shapes.includes(txtShape))
                            //    {
                            //        diamondFilters.Shapes.push(txtShape);
                            //    }
                            //    $(`.shape-btn[shapeId='${txtShape}']`).addClass('selected');

                            //}
                            const shapeId = txtShape?.toString(); // or parseInt(txtShape) depending on type of filter
                            if (shapeId && shapeId !== '0') {
                                if (!diamondFilters.Shapes.includes(shapeId)) {
                                    diamondFilters.Shapes.push(shapeId);
                                }
                                $(`.shape-btn[shapeId='${shapeId}']`).addClass('selected');
                            }
                            console.log("txtShape:", txtShape);
                            console.log("diamondFilters.Shapes:", diamondFilters.Shapes);



                            getDiamondDataList(diamondFilters, page, rangeVal);
                        } catch (error) {
                            console.error("An error occurred while loading data:", error);
                        }
                        hideLoader();
                    }

        async function ResetAllData()
        {
            suppressAutoLoad = true; // start suppressing

            $("#chkQuickShip").prop('checked', false);
            $("#chkGIA").prop('checked', false);
            $("#chkIGI").prop('checked', false);
                selectedLabs = ['GIA', 'IGI'];
                diamondFilters.Shapes = [];
                await Promise.all([
                    GetShapeDesign(),
                    GetCarat(),
                    GetCutData(),
                    GetColorData(),
                    GetClarityData(),
                    GetPriceData(),
                    GetPolishData(),
                    GetFluorData(),
                    GetSymmetryData(),
                    GetTableData(),
                    GetDepthData(),
                    GetRatioData(),
                ]);
                diamondFilters.LabNames = selectedLabs;
                suppressAutoLoad = false; // allow again
                getDiamondDataList(diamondFilters, page, rangeVal);
            }

        function resetCheckBox() {

                $('#diamond-list-container').find("#diamondTable tbody input[type='checkbox']").each(function () {
                    let diamondId = $(this).attr('diamondId');
                    if (selectedDiamonds.includes(diamondId)) {
                        $(this).prop('checked', true);
                        selectedCheckboxes.push($(this));
                    }
                    else {
                        $(this).prop('checked', false);
                    }
                });
            }

        function resetSelectedCheckBox(id) {

                $('#diamond-list-container').find("#diamondTable tbody input[type='checkbox']").each(function () {
                    let diamondId = $(this).attr('diamondId');
                    if (id == diamondId) {
                        $(this).prop('checked', false);
                    }
                });
            }

        function getWishlistCounter() {
            let wishlist = JSON.parse(localStorage.getItem("wishlist")) || [];
            let productWishlist = JSON.parse(localStorage.getItem("ProductWishlist")) || [];
            $("#wishlistCounter").text(wishlist.length + productWishlist.length);
            $("#wishlistMobileCounter").text(wishlist.length + productWishlist.length);
        }

        function updateWishlistUI() {
            let wishlist = JSON.parse(localStorage.getItem("wishlist")) || [];

            $('#diamond-list-container #diamondTable tbody .wishlist-toggle').each(function () {
                let diamondId = Number($(this).data("diamondid"));

                if (wishlist.includes(diamondId)) {
                    $(this).find(".heart-unchecked").hide();
                    $(this).find(".heart-checked").show();
                } else {
                    $(this).find(".heart-unchecked").show();
                    $(this).find(".heart-checked").hide();
                }
            });
        }

        async function GetCarat()
        {
                        try {
                            const response = await $.ajax({
                              url: '@Url.Action("GetCaratSizeDataRangeAsync1", "Diamond")',
                              method: 'GET',
                              dataType: 'json'
                            });

                            console.log(response); // handle the response

                            const maxCarat = response.maxCaratSize;
                            const minCarat = response.minCaratSize;
                            $("#minCarat").val(minCarat);
                            $("#maxCarat").val(maxCarat);
                            diamondFilters.FromCarat = $("#minCarat").val();
                            diamondFilters.ToCarat = $("#maxCarat").val();

                                // Initialize the price slider
                                $("#carat-size-slider").slider({
                                  range: true,
                                  min: minCarat, // Minimum price is 0
                                  max: maxCarat, // Set maximum from API response
                                  step: 0.1, // Step size for the slider
                                    values: [minCarat, maxCarat], // Default values
                                    slide: function (event, ui) {
                                    $("#minCarat").val(ui.values[0]);
                                    $("#maxCarat").val(ui.values[1]);

                                        diamondFilters.FromCarat=ui.values[0];
                                        diamondFilters.ToCarat=ui.values[1];

                                   //getDiamondDataList(diamondFilters,page,rangeVal);

                                  }

                                    , change: function (event, ui) {
                                        if (suppressAutoLoad) return;
                                     $("#minCarat").val(ui.values[0]);
                                     $("#maxCarat").val(ui.values[1]);

                                         diamondFilters.FromCarat=ui.values[0];
                                         diamondFilters.ToCarat=ui.values[1];

                                     getDiamondDataList(diamondFilters,page,rangeVal);

                                   }
                                });

                                // Set initial values for the price input fields

                              }
                              catch (error) {
                                // Handle any errors during the API request or slider setup
                                console.error('Error fetching data: ', error);
                                $('#filter-box #price-list').html('<p>Failed to load price ranges</p>');
                               }
            }


    </script>
}
