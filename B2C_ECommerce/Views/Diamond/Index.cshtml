@using Common

<section>
	<div class="listingpage">
		<div class="home-giftbanner-main position-relative left-text-banner">
			<a href="#" aria-label="" class="d-block">
				<div class="ole-image-banner thumb text-center ">
					<img src="~/assets/img/banner/filter-cover-image.jpg" class="filter-top-image" width="3840" height="300" alt="" title="" />
				</div>
			</a>
		</div>
	</div>
</section>

<!-- Product Section -->
<section class="product-area filter-page-section-padding">
	<div class="container-fluid">
		<div class="row">
			<div class="col-12 text-center">
				<h2 class="title font-sans-serif textId">Shop Lab Created Loose Diamonds</h2>
			</div>
		</div>
	</div>
	<hr />
	<div class="container-fluid">
		<div class="card border-1 filter-bg-shadow">
			<div class="card-body p-3" id="filter-box">

				@Html.Partial("_FilterBox")
			</div>
		</div>
	</div>
</section>

<!-- Product Table -->
<div class="container-fluid">
	<div class="row mt-3">
		<div class="col-md-12 text-center">
			<div class="row">
				<div class="col-xl-12">
					@* <div class="text-center" id="txtLoader" style="display:block;">
						<img src="~/assets/loader/JF-WEB-LOADER.gif" style="width:150px;">
					</div> *@
					<div id="loader-overlay">
						<div class="text-center" id="txtLoader">
							<img src="~/assets/loader/JF-WEB-LOADER.gif" style="width:100px;">
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="" id="diamond-list-container">
	</div>
	<div class="row">
		<div class="col-xl-12 text-center">
			<button id="showMoreBtn" class="btn btn-dark text-capitalize">Show More</button>
		</div>
	</div>

</div>

<!-- Certificate Modal -->
<div class="modal fade"
	 id="dimCertiModal"
	 data-bs-backdrop="static"
	 data-bs-keyboard="false"
	 tabindex="-1"
	 aria-labelledby="dimCertiLabel"
	 aria-hidden="true">
</div>

@section Scripts
{

	<script>
		var page=1;
		var rangeVal=10;
		// Initialize filters
		const getValue = id => $(id).val() || '';
		const getArrayValue = id => $(id).val() || [];

		var diamondFilters = {
				FromColor: getValue('#minColor'),
				ToColor: getValue('#maxColor'),
				FromCarat: getValue('#minCarat'),
				ToCarat: getValue('#maxCarat'),
				Shapes: getArrayValue('#shapes'),
				FromClarity: getValue('#minClarity'),
				ToClarity: getValue('#maxClarity'),
				FromPrice: getValue('#minPrice'),
				ToPrice: getValue('#maxPrice'),
				FromCut: getValue('#minCut'),
				ToCut: getValue('#maxCut'),
				FromRatio: getValue('#minLWRatio'),
				ToRatio: getValue('#maxLWRatio'),
				FromTable: getValue('#minTablePer'),
				ToTable: getValue('#maxTablePer'),
				FromDepth: getValue('#minDepthPer'),
				ToDepth: getValue('#maxDepthPer'),
				FromPolish: getValue('#minPolish'),
				ToPolish: getValue('#maxPolish'),
				FromFluor: getValue('#minFluor'),
				ToFluor: getValue('#maxFluor'),
				FromSymmety: getValue('#minSymmetry'),
				ToSymmety: getValue('#maxSymmetry')
			};

			function showLoader() {
				$('#txtLoader').show(); // This shows the loader
			}

			// Function to hide the loader
			function hideLoader() {
				$('#txtLoader').hide(); // This hides the loader
			}

		$(function () {
			// Initial Data Fetch
			loadAllFunctions();

			// GetShapeDesign();
			//	GetCarat();
			// const fixCut =GetCutData();
			// const fixColors =GetColorData();
			// const fixClarity =GetClarityData();
			// const fixPrice =GetPriceData();
			// const fixPolish =GetPolishData();
			// const fixFluor =GetFluorData();
			// const fixSym =GetSymmetryData();
			// GetTableData();
			// GetDepthData();
			// GetRatioData();
			//getDiamondDataList(diamondFilters, page, rangeVal);


			// Shape button click
			$("#shape-list").on("click", ".shape-btn", function () {
				const shapeId = $(this).attr('shapeId');
				$(this).toggleClass('selected');

				if ($(this).hasClass('selected')) {
					if (!diamondFilters.Shapes.includes(shapeId)) {
						diamondFilters.Shapes.push(shapeId);
					}
				} else {
					const index = diamondFilters.Shapes.indexOf(shapeId);
					if (index !== -1) diamondFilters.Shapes.splice(index, 1);
				}

				getDiamondDataList(diamondFilters, page, rangeVal);
			});

			// More/Less Filter Toggle
			$("#btnMoreFilter").click(() => {
				$("#divMoreFilter").show();
				$("#btnLessFilter").show();
				$("#btnMoreFilter").hide();
			});

			$("#btnLessFilter").click(() => {
				$("#divMoreFilter").hide();
				$("#btnLessFilter").hide();
				$("#btnMoreFilter").show();
			});

			 $('#showMoreBtn').click(()=> {
				rangeVal += 10;
				getDiamondDataList(diamondFilters, page, rangeVal); // Reload the table with new page size
			});

			$("#btnReset").on("click",function(){
				ResetAllData();
			});

			// Generic slider initializer
			function initSlider(selector, options) {
				$(selector).slider({
					range: true,
					...options
				});
			}

			// Price Slider
			initSlider("#price-slider", {
				min: 500, max: 50000, step: 0.01, values: [5000, 30000],
				slide: (e, ui) => {
					$("#minPrice").val("$" + ui.values[0]);
					$("#maxPrice").val("$" + ui.values[1]);
				}
			});

			// Cut Slider
			// initSlider("#Cut-slider", {
			// 	min: 0, max: 10, step: 1, values: [0, 10],
			// 	slide: (e, ui) => {
			// 		$("#minCut").val(ui.values[0]);
			// 		$("#maxCut").val(ui.values[1]);
			// 	}
			// });
			$(" #btnViewAll").on("click",function(){
				ResetAllData();
			});


			//clsCertificate
			$("#diamond-list-container #diamondTable").on("click",".clsCertificate",function(){
				var certificate = $(this).data("certi");
				$.ajax({
						url: '@Url.Action("GetCertificate", "Diamond", new { diamondCerti = "__CERTIFICATE__" })'.replace('__CERTIFICATE__', certificate),
						type: 'GET',
						dataType: 'json',
						success: function(response) {
							$('#dimCertiModal').html(response);
							$('#dimCertiModal').modal('show');
						},
						error: function(xhr, status, error) {
							console.error('AJAX error:', status, error);
						}
					});
			});


			// Categorical sliders
			const categoricalSliders = [
				{ id: "Clarity", data: fixClarity },
				{ id: "Polish", data: fixPolish },
				{ id: "Fluor", data: fixFluor },
				{ id: "Symmetry", data: fixSym, onSlideExtra: () => getDiamondDataList(diamondFilters, page, rangeVal) }
			];

			categoricalSliders.forEach(({ id, data, onSlideExtra }) => {
				initSlider(`#${id}-slider`, {
					min: 0,
					max: data.length - 1,
					step: 1,
					values: [0, 1],
					slide: function (e, ui) {
						$(`#min${id}`).val(data[ui.values[0]]);
						$(`#max${id}`).val(data[ui.values[1]]);
						if (onSlideExtra) onSlideExtra();
					}
				});
			});

			// Set initial values
			$("#minPrice").val("$" + $("#price-slider").slider("values", 0));
			$("#maxPrice").val("$" + $("#price-slider").slider("values", 1));

			$("#minCaratSize").val($("#carat-size-slider").slider("values", 0));
			$("#maxCaratSize").val($("#carat-size-slider").slider("values", 1));

			$("#minColor").val(fixColors[$("#color-slider").slider("values", 0)]);
			$("#maxColor").val(fixColors[$("#color-slider").slider("values", 1)]);

			$("#minCut").val(fixCut[$("#Cut-slider").slider("values", 0)]);
			$("#maxCut").val(fixCut[$("#Cut-slider").slider("values", 1)]);

			$("#minClarity").val(fixClarity[$("#Clarity-slider").slider("values", 0)]);
			$("#maxClarity").val(fixClarity[$("#Clarity-slider").slider("values", 1)]);

			$("#minPolish").val(fixPolish[$("#Polish-slider").slider("values", 0)]);
			$("#maxPolish").val(fixPolish[$("#Polish-slider").slider("values", 1)]);

			$("#minFluor").val(fixFluor[$("#Fluor-slider").slider("values", 0)]);
			$("#maxFluor").val(fixFluor[$("#Fluor-slider").slider("values", 1)]);

			$("#minSymmetry").val(fixSym[$("#Symmetry-slider").slider("values", 0)]);
			$("#maxSymmetry").val(fixSym[$("#Symmetry-slider").slider("values", 1)]);
		});


				async function GetShapeDesign() {
				  const shapeListContainer = $('#filter-box #shape-list'); // Cache the DOM selector
					  try {
						const response = await fetch('@SD.BaseApiUrl/api/diamondproperty/get-shape-list'); // Using native fetch
						const data = await response.json();

						if (Array.isArray(data) && data.length > 0) {
						  const shapeButtons = data.map(shape => {
							return `
								 <div class="shape-btn text-center" shapeId='${shape.Id}'>
								<input type="hidden" value="${shape.Id}" />
								<img src="${shape.IconPath}" alt="${shape.Name}" style="height:60px;" />
								<span>${shape.Name}</span>
							  </div>
							`;
						  }).join(''); // Concatenate all the buttons in a single string

						  shapeListContainer.html(shapeButtons); // Append all the shapes at once
						} else {
						  shapeListContainer.html('<p>No shapes available</p>');
						}
					  } catch (error) {
						console.error('Error fetching data:', error);
						shapeListContainer.html('<p>Failed to load shapes</p>');
					  }

				}


				async function GetCarat() {
					try {
						var response = await $.ajax({
							url: '@(SD.BaseApiUrl)/api/diamondproperty/get-carat-ranges', // API endpoint
							method: 'GET', // Using GET request
							dataType: 'json', // Expecting JSON response
						});

						$("#carat-size-slider").slider({
							range: true,
							min: response.MinCaratSize,  // Set minimum from API response
							max: response.MaxCaratSize,  // Set maximum from API response
							step: 0.1, // Adjust step size as needed
							values: [response.MinCaratSize, response.MaxCaratSize / 2], // Default values
							slide: function (event, ui) {
								debugger;
								$("#minCarat").val(ui.values[0]);
								$("#maxCarat").val(ui.values[1]);

								diamondFilters.FromCarat=ui.values[0];
								diamondFilters.ToCarat=ui.values[1];

								getDiamondDataList(diamondFilters,page,rangeVal);
							}
						});

						// Set initial values
						$("#minCarat").val(response.MinCaratSize);
						$("#maxCarat").val(response.MaxCaratSize);

					} catch (error) {
						console.error('Error fetching data: ', error);
						$('#filter-box #shape-list').html('<p>Failed to load shapes</p>');
					}
				}

				async function GetColorData() {
					try {
						// Fetching data from API
						var response = await $.ajax({
							url: '@(SD.BaseApiUrl)/api/diamondproperty/diamond-property/get-color-list',
							method: 'GET',
							dataType: 'json',
						});

						// Extract color names
						// const colorList = response.map(item => item.Name);
						const colorList = response.map();

						// Ensure that there's at least one color to avoid errors
						if (colorList.length === 0) {
							console.warn('No colors available');
							return;
						}

						// Calculate slider step as the index difference
						const StepCount = 1;

						$("#color-slider").slider({
							range: true,
							min: 0,
							max: colorList.length - 1,
							step: StepCount,
							values: [0, colorList.length - 1],
							slide: function (event, ui) {
								// Set the selected color values based on slider indices
								$("#minColor").val(colorList[ui.values[0]]);
								$("#maxColor").val(colorList[ui.values[1]]);

								diamondFilters.FromColor= colorList[ui.values[0]];
								diamondFilters.ToColor= colorList[ui.values[1]];


								getDiamondDataList(diamondFilters,page,rangeVal);

							}
						});

						// Set initial values for the min and max color fields
						$("#minColor").val(colorList[0]);
						$("#maxColor").val(colorList[colorList.length - 1]);

					} catch (error) {
						console.error('Error fetching data: ', error);
						$('#filter-box #color-slider').html('<p>Failed to load colors</p>');
					}
				}
				async function GetCutData() {
						try {
							// Fetch cut list from the API
							const response = await $.ajax({
								url: '@(SD.BaseApiUrl)/api/diamondproperty/get-cut-list',
								method: 'GET',
								dataType: 'json'
							});

							// Validate response
							if (!Array.isArray(response) || response.length === 0) {
								console.warn('No cuts available');
								$('#filter-box #cut-slider').html('<p>No cuts available</p>');
								return;
							}

							// Extract valid numeric cut values
							const cutList = response.map(item => item.Name);

							if (cutList.length === 0) {
								console.warn('No valid numeric cuts available');
								$('#filter-box #cut-slider').html('<p>No valid cuts available</p>');
								return;
							}

							const minCut = cutList[0];
							const maxCut = cutList[cutList.length - 1];

							// Initialize the jQuery UI slider
							$("#Cut-slider").slider({
								range: true,
								min: 0,
								max: cutList.length - 1,
								step: 1,
								values: [0, cutList.length - 1], // Start from first to last cut
								slide: function (event, ui) {
									const fromCut = cutList[ui.values[0]];
									const toCut = cutList[ui.values[1]];

									$("#minCut").val(fromCut);
									$("#maxCut").val(toCut);

									diamondFilters.FromCut = fromCut;
									diamondFilters.ToCut = toCut;

									getDiamondDataList(diamondFilters, page, rangeVal);
								}
							});

							// Set initial displayed values
							$("#minCut").val(minCut);
							$("#maxCut").val(maxCut);

						} catch (error) {
							console.error('Error fetching cut data:', error);
							$('#filter-box #cut-slider').html('<p>Failed to load cuts</p>');
						}
					}
				async function GetClarityData() {
					debugger;
				  try {
					// Fetching data from the API
					const response = await $.ajax({
						  url: '@(SD.BaseApiUrl)/api/diamondproperty/diamond-property/get-clarity-list',
					  method: 'GET',
					  dataType: 'json',
					});

					// Check if response is valid and contains the necessary data
					if (!Array.isArray(response) || response.length === 0) {
						  console.warn('No Clarity available');
						  $('#filter-box #Clarity-slider').html('<p>No clarity available</p>');
					  return;
					}

					// Extract the cut names directly from the response
					const clarityList = response.map(item => item.Name);

					// Ensure there is at least one cut value
						if (clarityList.length === 0) {
					  console.warn('No clarity available');
					  return;
					}

					// Initialize the slider with the extracted data
						const minClarity = clarityList[0];
						const maxClarity = clarityList[clarityList.length - 1];

					// Calculate the step count (fixed to 1 as per your code)
					const StepCount = 1;

					$("#Clarity-slider").slider({
								range: true,
								min: 0,
								max: clarityList.length - 1,
								step: 1,
								values: [0, clarityList.length - 1], // Start from first to last cut
								slide: function (event, ui) {
									$("#minClarity").val(minClarity);
									$("#maxClarity").val(maxClarity);

									diamondFilters.FromClarity=ui.values[0];
									diamondFilters.ToClarity=ui.values[1];

									getDiamondDataList(diamondFilters, page, rangeVal);
								}
							});


					// Set initial values for the min and max cut fields
							$("#minClarity").val(minClarity);
							$("#maxClarity").val(maxClarity);

				  } catch (error) {
					// Handle errors during the API call or slider setup
					console.error('Error fetching data: ', error);
						$('#filter-box #cut-slider').html('<p>Failed to load clarity</p>');
				  }
				}
				async function GetPriceData() {
						try {
									// Fetching price data from the API
									const response = await $.ajax({
									  url: '@(SD.BaseApiUrl)/api/diamondproperty/get-price-ranges', // API endpoint
									  method: 'GET', // GET request
									  dataType: 'json', // Expecting JSON response
									});

									// Ensure the response contains MaxPrice
									if (!response || typeof response.MaxPrice !== 'number') {
									  throw new Error('Invalid response structure');
									}

							const maxPrice = response.MaxPrice;
							const minPrice = response.MinPrice;

									// Initialize the price slider
									$("#price-slider").slider({
									  range: true,
									  min: minPrice, // Minimum price is 0
									  max: maxPrice, // Set maximum from API response
									  step: 0.1, // Step size for the slider
									  values: [minPrice, maxPrice], // Default values
									  slide: function (event, ui) {
										  debugger;
										// Update the min and max price input fields dynamically
										$("#minPrice").val(ui.values[0]);
										$("#maxPrice").val(ui.values[1]);

										diamondFilters={
											FromPrice: $('#minPrice').val() ? $('#minPrice').val() : '',
											ToPrice: $('#maxPrice').val() ? $('#maxPrice').val() : ''
										};

										// diamondFilters.FromPrice=ui.values[0];
										// diamondFilters.ToPrice=ui.values[1];

										getDiamondDataList(diamondFilters,page,rangeVal);

									  }
									});

									// Set initial values for the price input fields
									$("#minPrice").val(minPrice);
									$("#maxPrice").val(maxPrice);

								  } catch (error) {
									// Handle any errors during the API request or slider setup
									console.error('Error fetching data: ', error);
									$('#filter-box #price-list').html('<p>Failed to load price ranges</p>');
								  }
								}
				async function GetTableData() {
				  try {
					// Fetch data from the API endpoint
					const response = await $.ajax({
					  url: '@(SD.BaseApiUrl)/api/diamondproperty/get-table-ranges', // API endpoint
					  method: 'GET', // GET request
					  dataType: 'json', // Expecting JSON response
					});

					// Validate the response structure
					if (!response || typeof response.MaxValue !== 'number') {
					  throw new Error('Invalid response structure');
					}

					const maxValue = response.MaxValue;

					// Initialize the slider only if it hasn't been initialized already
					const $slider = $("#TablePer-slider");
					if ($slider.data('initialized')) return; // Prevent re-initialization
					$slider.data('initialized', true); // Mark slider as initialized

					// Setup the slider with the max value
					$slider.slider({
					  range: true,
					  min: 0,
					  max: maxValue,
					  step: 0.1,
					  values: [0, maxValue],
					  slide: function (event, ui) {
						// Update the min and max values on slide
						$("#minTablePer").val(ui.values[0]);
						$("#maxTablePer").val(ui.values[1]);

						// Update filters and fetch the data list
						diamondFilters.FromTable = ui.values[0];
						diamondFilters.ToTable = ui.values[1];

						getDiamondDataList(diamondFilters, page, rangeVal);
					  }
					});

					// Set initial values for the input fields
					$("#minTablePer").val(0);
					$("#maxTablePer").val(maxValue);

				  } catch (error) {
					// Handle any errors during the API request or slider setup
					console.error('Error fetching data:', error);
					$('#filter-box #table-list').html('<p>Failed to load table ranges</p>');
				  }
				}

				async function GetDepthData() {
								try {
											// Fetching price data from the API
											const response = await $.ajax({
												  url: '@(SD.BaseApiUrl)/api/diamondproperty/get-depth-ranges', // API endpoint
											  method: 'GET', // GET request
											  dataType: 'json', // Expecting JSON response
											});

											// Ensure the response contains MaxPrice
											if (!response || typeof response.MaxValue !== 'number') {
											  throw new Error('Invalid response structure');
											}

												const maxValue = response.MaxValue;

											// Initialize the price slider
												$("#DepthPer-slider").slider({
											  range: true,
											  min: 0, // Minimum price is 0
												  max: maxValue, // Set maximum from API response
											  step: 0.1, // Step size for the slider
												  values: [0, maxValue], // Default values
											  slide: function (event, ui) {
												// Update the min and max price input fields dynamically
													$("#minDepthPer").val(ui.values[0]);
													$("#maxDepthPer").val(ui.values[1]);
											  }
											});

											// Set initial values for the price input fields
												$("#minDepthPer").val(0);
													$("#maxDepthPer").val(maxValue);

										  } catch (error) {
											// Handle any errors during the API request or slider setup
											console.error('Error fetching data: ', error);
												$('#filter-box #DepthPer-list').html('<p>Failed to load depth ranges</p>');
										  }
										}
				async function GetRatioData() {
						try {
							// Fetching data from API
							var response = await $.ajax({
								url: '@(SD.BaseApiUrl)/api/diamondproperty/get-ratio-list',
								method: 'GET',
								dataType: 'json',
							});

							// Extract color names
							const ratioList = response.map(item => item.Name);

							// Ensure that there's at least one color to avoid errors
							if (ratioList.length === 0) {
								console.warn('Not found ratio.');
								return;
							}

							// Calculate slider step as the index difference
							const StepCount = 1;

									$("#LWRatio-slider").slider({
								range: true,
								min: 0,
									max: ratioList.length - 1,
								step: StepCount,
								values: [0, ratioList.length - 1],
								slide: function (event, ui) {
									// Set the selected color values based on slider indices
										$("#minLWRatio").val(ratioList[ui.values[0]]);
										$("#maxLWRatio").val(ratioList[ui.values[1]]);

										diamondFilters.FromTable = $("#minLWRatio").val();
										diamondFilters.ToTable = $("#maxLWRatio").val();

										getDiamondDataList(diamondFilters, page, rangeVal);
								}
							});

							// Set initial values for the min and max color fields
									$("#minLWRatio").val(ratioList[0]);
									$("#maxLWRatio").val(ratioList[ratioList.length - 1]);

						} catch (error) {
							console.error('Error fetching data: ', error);
									$('#filter-box #LWRatio-slider').html('<p>Failed to load Ratio</p>');
						}
					}
				async function GetPolishData() {
							try {
								// Fetching data from API
								var response = await $.ajax({
											url: '@(SD.BaseApiUrl)/api/diamondproperty/get-polish-list',
									method: 'GET',
									dataType: 'json',
								});

								// Extract color names
								const polishList = response.map(item => item.Name);

								// Ensure that there's at least one color to avoid errors
									if (polishList.length === 0) {
										console.warn('Not found polish.');
									return;
								}

								// Calculate slider step as the index difference
								const StepCount = 1;

								$("#Polish-slider").slider({
									range: true,
									min: 0,
									max: polishList.length - 1,
									step: StepCount,
									values: [0, polishList.length-1],
									slide: function (event, ui) {
										// Set the selected color values based on slider indices
											$("#minPolish").val(polishList[ui.values[0]]);
											$("#maxPolish").val(polishList[ui.values[1]]);
									}
								});

								// Set initial values for the min and max color fields
											$("#minPolish").val(polishList[0]);
											$("#maxPolish").val(polishList[polishList.length - 1]);
											diamondFilters.FromPolish = $("#minPolish").val();
										diamondFilters.ToPolish = $("#maxPolish").val();

										getDiamondDataList(diamondFilters, page, rangeVal);

							} catch (error) {
								console.error('Error fetching data: ', error);
								$('#filter-box #Polish-slider').html('<p>Failed to load Polish</p>');
							}
						}
				async function GetFluorData() {
								try {
									// Fetching data from API
									var response = await $.ajax({
										url: '@(SD.BaseApiUrl)/api/diamondproperty/get-fluor-list',
										method: 'GET',
										dataType: 'json',
									});

									// Extract color names
									const fluorList = response.map(item => item.Name);

									// Ensure that there's at least one color to avoid errors
											if (fluorList.length === 0) {
											console.warn('Not found fluor.');
										return;
									}

									// Calculate slider step as the index difference
									const StepCount = 1;

									$("#Fluor-slider").slider({
										range: true,
										min: 0,
										max: fluorList.length - 1,
										step: StepCount,
										values: [0, fluorList.length-1],
										slide: function (event, ui) {
											// Set the selected color values based on slider indices
												$("#minFluor").val(fluorList[ui.values[0]]);
												$("#maxFluor").val(fluorList[ui.values[1]]);
										}
									});

									// Set initial values for the min and max color fields
													$("#minFluor").val(fluorList[0]);
													$("#maxFluor").val(fluorList[fluorList.length - 1]);

													diamondFilters.FromFluor = $("#minFluor").val();
													diamondFilters.ToFluor = $("#maxFluor").val();

													getDiamondDataList(diamondFilters, page, rangeVal);

								} catch (error) {
									console.error('Error fetching data: ', error);
									$('#filter-box #Fluor-slider').html('<p>Failed to load fluor</p>');
								}
							}
				async function GetSymmetryData()
				{
									try {
										// Fetching data from API
										var response = await $.ajax({
											url: '@(SD.BaseApiUrl)/api/diamondproperty/get-symmetry-list',
											method: 'GET',
											dataType: 'json',
										});

										// Extract color names
										const symmetryList = response.map(item => item.Name);

										// Ensure that there's at least one color to avoid errors
										if (symmetryList.length === 0) {
												console.warn('Not found symmetry.');
												return;
										}

										// Calculate slider step as the index difference
										const StepCount = 1;

										$("#Symmetry-slider").slider({
											range: true,
											min: 0,
											max: symmetryList.length - 1,
											step: StepCount,
											values: [0, symmetryList.length-1],
											slide: function (event, ui)
											{
												// Set the selected color values based on slider indices
												$("#minSymmetry").val(symmetryList[ui.values[0]]);
												$("#maxSymmetry").val(symmetryList[ui.values[1]]);

												diamondFilters.FromSymmety = $("#minSymmetry").val();
												diamondFilters.ToSymmety = $("#maxSymmetry").val();

												getDiamondDataList(diamondFilters, page, rangeVal);
											}
										});

										// Set initial values for the min and max color fields
											$("#minSymmetry").val(symmetryList[0]);
											$("#maxSymmetry").val(symmetryList[symmetryList.length - 1]);

									} catch (error) {
										console.error('Error fetching data: ', error);
										$('#filter-box #Symmetry-slider').html('<p>Failed to load symmetry</p>');
									}
							}

				async function getDiamondDataList(diamondFilters, pageNumber = 1, pageSize = 10) {
					showLoader();
					return $.ajax({
						//url: '@Url.Action("GetDiamondList", "Diamond")', // Change this to your actual route
						url: '/Diamond/GetDiamondList', // Change this to your actual route
						type: 'POST',
						data: {
							diamondFilters: diamondFilters,
							pageNumber: pageNumber,
							pageSize: pageSize
						},
						success: function (data) {
							$('#diamond-list-container').html(data);
							// setTimeout(() => {
							//     hideLoader();
							// }, 10000);
							hideLoader();
						},
						error: function (error) {
							console.error('Error fetching data:', error);
							//   setTimeout(() => {
							//     hideLoader();
							// }, 10000);
							hideLoader();
						}

					});
				}

				async function loadAllFunctions() {
					showLoader();
					try {
						await Promise.all([

							GetShapeDesign(),
							GetCarat(),
							GetCutData(),
							GetColorData(),
							GetClarityData(),
							GetPriceData(),
							GetPolishData(),
							GetFluorData(),
							GetSymmetryData(),
							GetTableData(),
							GetDepthData(),
							GetRatioData(),
						]);
						  await  getDiamondDataList(diamondFilters, page, rangeVal);
					} catch (error) {
						console.error("An error occurred while loading data:", error);
					}
					hideLoader();
				}

				async function getDiamondDataList(diamondFilters, pageNumber = 1, pageSize = 10) {
					showLoader();
					return $.ajax({
						//url: '@Url.Action("GetDiamondList", "Diamond")', // Change this to your actual route
						url: '/Diamond/GetDiamondList', // Change this to your actual route
						type: 'POST',
						data: {
							diamondFilters: diamondFilters,
							pageNumber: pageNumber,
							pageSize: pageSize
						},
						success: function (data) {
							$('#diamond-list-container').html(data);
							// setTimeout(() => {
							//     hideLoader();
							// }, 10000);
							hideLoader();
						},
						error: function (error) {
							console.error('Error fetching data:', error);
							//   setTimeout(() => {
							//     hideLoader();
							// }, 10000);
							hideLoader();
						}

					});
				}

		function ResetAllData(){
				GetShapeDesign();
				GetCarat();
				GetCutData();
				GetColorData();
				GetClarityData();
				GetPriceData();
				GetPolishData();
				GetFluorData();
				GetSymmetryData();
				GetTableData();
				GetDepthData();
				GetRatioData();
				diamondFilters = [];
				getDiamondDataList(diamondFilters, page, rangeVal);
		}


	</script>
}
