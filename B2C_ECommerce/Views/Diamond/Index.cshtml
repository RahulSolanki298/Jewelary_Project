@using Common
<section>
	<div class="listingpage">
		<div class="home-giftbanner-main position-relative left-text-banner">
			<a href="#" aria-label="" class="d-block">
				<div class="ole-image-banner thumb text-center ">
					<img src="~/assets/img/banner/filter-cover-image.jpg" class="filter-top-image" width="3840" height="300" alt="" title="" />
				</div>
			</a>
		</div>
	</div>
</section>

<!-- Product Section -->
<section class="product-area filter-page-section-padding">
	<div class="container-fluid">
		<div class="row">
			<div class="col-12 text-center">
				<h2 class="title font-sans-serif textId">Shop Lab Created Loose Diamonds</h2>
			</div>
		</div>
	</div>
	<hr />
	<div class="container-fluid">
		<div class="card border-1 filter-bg-shadow">
			<div class="card-body p-3" id="filter-box">
				@Html.Partial("_FilterBox")
			</div>
		</div>
	</div>
</section>

<!-- Product Table -->
<div class="container-fluid" id="diamond-list-container">
</div>

<!-- Certificate Modal -->
<div class="modal fade"
	 id="dimCertiModal"
	 data-bs-backdrop="static"
	 data-bs-keyboard="false"
	 tabindex="-1"
	 aria-labelledby="dimCertiLabel"
	 aria-hidden="true">
</div>

@section Scripts
{
	<script>

				$(function () {
					var page=1;
					var rangeVal=10;
					GetShapeDesign();
					GetCarat();
					var fixColors=GetColorData();
					var fixCut =GetCutData();
					var fixClarity=GetClarityData();
					var fixPrice=GetPriceData();
					GetTableData();
					GetDepthData();
					GetRatioData();
					GetPolishData();
					GetFluorData();
					fixSym=GetSymmetryData();

					var diamondFilters =
					{
						FromColor: $('#minColor').val() ? $('#minColor').val() : '',
						ToColor: $('#maxColor').val() ? $('#maxColor').val() : '',
						FromCarat: $('#minCarat').val() ? $('#minCarat').val() : '',
						ToCarat: $('#maxCarat').val() ? $('#maxCarat').val() : '',
						Shapes: $('#shapes').val() ? $('#shapes').val() : [],
						FromClarity: $('#minClarity').val() ? $('#minClarity').val() : '',
						ToClarity: $('#maxClarity').val() ? $('#maxClarity').val() : '',
						FromPrice: $('#minPrice').val() ? $('#minPrice').val() : '', // Single value
						ToPrice: $('#maxPrice').val() ? $('#maxPrice').val() : '', // Single value
						FromCut:$('#minCut').val() ? $('#minCut').val() : '',
						ToCut:$('#maxCut').val() ? $('#maxCut').val() : '',
						FromRatio: $('#minLWRatio').val() ? $('#minLWRatio').val() : '',
						ToRatio: $('#maxLWRatio').val() ? $('#maxLWRatio').val() : '',
						FromTable: $('#minTablePer').val() ? $('#minTablePer').val() : '',
						ToTable: $('#maxTablePer').val() ? $('#maxTablePer').val() : '',
						FromDepth: $('#minDepthPer').val() ? $('#minDepthPer').val() : '',
						ToDepth: $('#maxDepthPer').val() ? $('#maxDepthPer').val() : '',
						FromPolish: $('#minPolish').val() ? $('#minPolish').val() : '',
						ToPolish: $('#maxPolish').val() ? $('#maxPolish').val() : '',
						FromFluor: $('#minFluor').val() ? $('#minFluor').val() : '',
						ToFluor: $('#maxFluor').val() ? $('#maxFluor').val() : '',
						FromSymmety: $('#minSymmetry').val() ? $('#minSymmetry').val() : '',
						ToSymmety: $('#maxSymmetry').val() ? $('#maxSymmetry').val() : ''
					};
					getDiamondDataList(diamondFilters,page,rangeVal);


					$("#shape-list").on("click", ".shape-btn", function() {
						const shapeId = $(this).attr('shapeId');
						console.log("Shape ID: " + shapeId);

						// Toggle the 'selected' class
						$(this).toggleClass('selected');

						// Check if shapeId is already in the filter array
						if ($(this).hasClass('selected')) {
							// If the button has the 'selected' class, add the shapeId to the filter
							if (!diamondFilters.Shapes.includes(shapeId)) {
								diamondFilters.Shapes.push(shapeId);
							}
						} else {
							// If the button does not have the 'selected' class, remove the shapeId from the filter
							const index = diamondFilters.Shapes.indexOf(shapeId);
							if (index !== -1) {
								diamondFilters.Shapes.splice(index, 1);
							}
						}

						getDiamondDataList(diamondFilters, page, rangeVal);
					});

					$("#carat-size-slider").slider({
							range: true,
							min: 0,  // Set minimum from API response
							max: 50,  // Set maximum from API response
							step: 0.1, // Adjust step size as needed
							values: [1,2,3], // Default values
							slide: function (event, ui) {
								$("#minCarat").val(ui.values[0]);
								$("#maxCarat").val(ui.values[1]);

								diamondFilters.FromCarat=$("#minCarat").val();
								diamondFilters.ToCarat=$("#maxCarat").val();
								getDiamondDataList(diamondFilters, page, rangeVal);

							}
						});



					$("#btnMoreFilter").click(function () {
						$("#divMoreFilter").show();
						$("#btnLessFilter").show();
						$("#btnMoreFilter").hide();
					});

					$("#btnLessFilter").click(function () {
						$("#divMoreFilter").hide();
						$("#btnLessFilter").hide();
						$("#btnMoreFilter").show();
					});

					// $("#price-slider").slider({
					// 	range: true,
					// 	min: 500,
					// 	max: 50000,
					// 	step: 0.01,
					// 	values: [5000, 30000],
					// 	slide: function (event, ui) {
					// 		$("#minPrice").val("$" + ui.values[0]);
					// 		$("#maxPrice").val("$" + ui.values[1]);

					// 		getDiamondDataList(diamondFilters, page, rangeVal);

					// 	}
					// });

					$("#Cut-slider").slider({
						range: true,
						min: 0,
						max: fixCut.length - 1,
						step: 1,
						values: [0, 1],
						slide: function (event, ui) {
							$("#minCut").val(fixCut[ui.values[0]]);
							$("#maxCut").val(fixCut[ui.values[1]]);
							getDiamondDataList(diamondFilters,page,rangeVal);
						}
					});

					$("#Clarity-slider").slider({
						range: true,
						min: 0,
						max: fixClarity.length - 1,
						step: 1,
						values: [0, 1],
						slide: function (event, ui) {
							$("#minClarity").val(fixClarity[ui.values[0]]);
							$("#maxClarity").val(fixClarity[ui.values[1]]);

							getDiamondDataList(diamondFilters,page,rangeVal);
						}
					});

					// $("#Polish-slider").slider({
					// 	range: true,
					// 	min: 0,
					// 	max: fixPolish.length - 1,
					// 	step: 1,
					// 	values: [0, 1],
					// 	slide: function (event, ui) {
					// 		$("#minPolish").val(fixPolish[ui.values[0]]);
					// 		$("#maxPolish").val(fixPolish[ui.values[1]]);
					// 	}
					// });

					$("#Fluor-slider").slider({
						range: true,
						min: 0,
						max: fixFluor.length - 1,
						step: 1,
						values: [0, 1],
						slide: function (event, ui) {
							$("#minFluor").val(fixFluor[ui.values[0]]);
							$("#maxFluor").val(fixFluor[ui.values[1]]);
						}
					});

					$("#Symmetry-slider").slider({
						range: true,
						min: 0,
						max: fixSym.length - 1,
						step: 1,
						values: [0, 1],
						slide: function (event, ui) {
							$("#minSymmetry").val(fixSym[ui.values[0]]);
							$("#maxSymmetry").val(fixSym[ui.values[1]]);


							 getDiamondDataList(diamondFilters, page, rangeVal);

						}
					});

					// $("#minPrice").val("$ "+$("#price-slider").slider("values", 0));
					// $("#maxPrice").val("$ "+$("#price-slider").slider("values", 1));

					$("#minCaratSize").val($("#carat-size-slider").slider("values",0));
					$("#maxCaratSize").val($("#carat-size-slider").slider("values", 1));

					$("#minColor").val(fixColors[$("#color-slider").slider("values", 0)]);
					$("#maxColor").val(fixColors[$("#color-slider").slider("values", 1)]);

					$("#minCut").val(fixCut[$("#Cut-slider").slider("values", 0)]);
					$("#maxCut").val(fixCut[$("#Cut-slider").slider("values", 1)]);

					$("#minClarity").val(fixClarity[$("#Clarity-slider").slider("values", 0)]);
					$("#maxClarity").val(fixClarity[$("#Clarity-slider").slider("values", 1)]);

					$("#minPolish").val(fixPolish[$("#Polish-slider").slider("values", 0)]);
					$("#maxPolish").val(fixPolish[$("#Polish-slider").slider("values", 1)]);

					$("#minFluor").val(fixFluor[$("#Fluor-slider").slider("values", 0)]);
					$("#maxFluor").val(fixFluor[$("#Fluor-slider").slider("values", 1)]);

					// $("#minSymmetry").val(fixSym[$("#Symmetry-slider").slider("values", 0)]);
					// $("#maxSymmetry").val(fixSym[$("#Symmetry-slider").slider("values", 1)]);

		});

				async function GetShapeDesign() {
				  const shapeListContainer = $('#filter-box #shape-list'); // Cache the DOM selector
				  shapeListContainer.empty(); // Clear the previous content

				  try {
					const response = await fetch('@SD.BaseApiUrl/api/diamondproperty/get-shape-list'); // Using native fetch
					const data = await response.json();

					if (Array.isArray(data) && data.length > 0) {
					  const shapeButtons = data.map(shape => {
						return `
							 <div class="shape-btn text-center" shapeId='${shape.Id}'>
							<input type="hidden" value="${shape.Id}" />
							<img src="${shape.IconPath}" alt="${shape.Name}" />
							<span>${shape.Name}</span>
						  </div>
						`;
					  }).join(''); // Concatenate all the buttons in a single string

					  shapeListContainer.html(shapeButtons); // Append all the shapes at once
					} else {
					  shapeListContainer.html('<p>No shapes available</p>');
					}
				  } catch (error) {
					console.error('Error fetching data:', error);
					shapeListContainer.html('<p>Failed to load shapes</p>');
				  }
				}


				async function GetCarat() {
					try {
						var response = await $.ajax({
							url: '@(SD.BaseApiUrl)/api/diamondproperty/get-carat-ranges', // API endpoint
							method: 'GET', // Using GET request
							dataType: 'json', // Expecting JSON response
						});

						// Initialize the slider with API response
						$("#carat-size-slider").slider({
							range: true,
							min: response.MinCaratSize,  // Set minimum from API response
							max: response.MaxCaratSize,  // Set maximum from API response
							step: 0.1, // Adjust step size as needed
							values: [response.MinCaratSize, response.MaxCaratSize / 2], // Default values
							slide: function (event, ui) {
								$("#minCarat").val(ui.values[0]);
								$("#maxCarat").val(ui.values[1]);
							}
						});

						// Set initial values
						$("#minCarat").val(response.MinCaratSize);
						$("#maxCarat").val(response.MaxCaratSize);

					} catch (error) {
						console.error('Error fetching data: ', error);
						$('#filter-box #shape-list').html('<p>Failed to load shapes</p>');
					}
				}

				async function GetColorData() {
					try {
						// Fetching data from API
						var response = await $.ajax({
							url: '@(SD.BaseApiUrl)/api/diamondproperty/diamond-property/get-color-list',
							method: 'GET',
							dataType: 'json',
						});

						// Extract color names
						const colorList = response.map(item => item.Name);

						// Ensure that there's at least one color to avoid errors
						if (colorList.length === 0) {
							console.warn('No colors available');
							return;
						}

						// Calculate slider step as the index difference
						const StepCount = 1;

						$("#color-slider").slider({
							range: true,
							min: 0,
							max: colorList.length - 1,
							step: StepCount,
							values: [0, colorList.length - 1],
							slide: function (event, ui) {
								// Set the selected color values based on slider indices
								$("#minColor").val(colorList[ui.values[0]]);
								$("#maxColor").val(colorList[ui.values[1]]);
							}
						});

						// Set initial values for the min and max color fields
						$("#minColor").val(colorList[0]);
						$("#maxColor").val(colorList[colorList.length - 1]);

					} catch (error) {
						console.error('Error fetching data: ', error);
						$('#filter-box #color-slider').html('<p>Failed to load colors</p>');
					}
				}
				async function GetCutData() {
								  try {
									// Fetching data from the API
									const response = await $.ajax({
									  url: '@(SD.BaseApiUrl)/api/diamondproperty/get-cut-list',
									  method: 'GET',
									  dataType: 'json',
									});

									// Check if response is valid and contains the necessary data
									if (!Array.isArray(response) || response.length === 0) {
									  console.warn('No cuts available');
									  $('#filter-box #cut-slider').html('<p>No cuts available</p>');
									  return;
									}

									// Extract the cut names directly from the response
									const cutList = response.map(item => item.Name);

									// Ensure there is at least one cut value
									if (cutList.length === 0) {
									  console.warn('No cuts available');
									  return;
									}

									// Initialize the slider with the extracted data
									const minCut = cutList[0];
									const maxCut = cutList[cutList.length - 1];

									// Calculate the step count (fixed to 1 as per your code)
									const StepCount = 1;

									$("#cut-slider").slider({
									  range: true,
									  min: 0,
									  max: cutList.length - 1,
									  step: StepCount,
									  values: [0, cutList.length - 1],
									  slide: function (event, ui) {
										// Update the min and max values dynamically based on the slider
										$("#minCut").val(cutList[ui.values[0]]);
										$("#maxCut").val(cutList[ui.values[1]]);
									  }
									});

									// Set initial values for the min and max cut fields
									$("#minCut").val(minCut);
									$("#maxCut").val(maxCut);

								  } catch (error) {
									// Handle errors during the API call or slider setup
									console.error('Error fetching data: ', error);
									$('#filter-box #cut-slider').html('<p>Failed to load cuts</p>');
								  }
					}
				
				async function GetClarityData() {
				  try {
					// Fetching data from the API
					const response = await $.ajax({
						  url: '@(SD.BaseApiUrl)/api/diamondproperty/diamond-property/get-clarity-list',
					  method: 'GET',
					  dataType: 'json',
					});

					// Check if response is valid and contains the necessary data
					if (!Array.isArray(response) || response.length === 0) {
						  console.warn('No Clarity available');
						  $('#filter-box #Clarity-slider').html('<p>No clarity available</p>');
					  return;
					}

					// Extract the cut names directly from the response
					const clarityList = response.map(item => item.Name);

					// Ensure there is at least one cut value
						if (clarityList.length === 0) {
					  console.warn('No clarity available');
					  return;
					}

					// Initialize the slider with the extracted data
						const minClarity = clarityList[0];
						const maxClarity = clarityList[clarityList.length - 1];

					// Calculate the step count (fixed to 1 as per your code)
					const StepCount = 1;

						$("#Clarity-slider").slider({
					  range: true,
					  min: 0,
					  max: clarityList.length - 1,
					  step: StepCount,
					  values: [0, clarityList.length - 1],
					  slide: function (event, ui) {
						// Update the min and max values dynamically based on the slider
							$("#minClarity").val(clarityList[ui.values[0]]);
							$("#maxClarity").val(clarityList[ui.values[1]]);
					  }
					});

					// Set initial values for the min and max cut fields
							$("#minClarity").val(minClarity);
							$("#maxClarity").val(maxClarity);

				  } catch (error) {
					// Handle errors during the API call or slider setup
					console.error('Error fetching data: ', error);
						$('#filter-box #cut-slider').html('<p>Failed to load clarity</p>');
				  }
				}
				async function GetPriceData() {
						try {
									// Fetching price data from the API
									const response = await $.ajax({
									  url: '@(SD.BaseApiUrl)/api/diamondproperty/get-price-ranges', // API endpoint
									  method: 'GET', // GET request
									  dataType: 'json', // Expecting JSON response
									});

									// Ensure the response contains MaxPrice
									if (!response || typeof response.MaxPrice !== 'number') {
									  throw new Error('Invalid response structure');
									}

							const maxPrice = response.MaxPrice;
							const minPrice = response.MinPrice;

									// Initialize the price slider
									$("#price-slider").slider({
									  range: true,
									  min: minPrice, // Minimum price is 0
									  max: maxPrice, // Set maximum from API response
									  step: 0.1, // Step size for the slider
									  values: [minPrice, maxPrice], // Default values
									  slide: function (event, ui) {
										// Update the min and max price input fields dynamically
										$("#minPrice").val(ui.values[0]);
										$("#maxPrice").val(ui.values[1]);
									  }
									});

									// Set initial values for the price input fields
									$("#minPrice").val(minPrice);
									$("#maxPrice").val(maxPrice);

								  } catch (error) {
									// Handle any errors during the API request or slider setup
									console.error('Error fetching data: ', error);
									$('#filter-box #price-list').html('<p>Failed to load price ranges</p>');
								  }
								}
				async function GetTableData() {
							try {
									const response = await $.ajax({
									url: '@(SD.BaseApiUrl)/api/diamondproperty/get-table-ranges', // API endpoint
									method: 'GET', // GET request
										  dataType: 'json', // Expecting JSON response
									});

									if (!response || typeof response.MaxValue !== 'number') {
									  throw new Error('Invalid response structure');
									}

										const maxValue = response.MaxValue;

									$("#TablePer-slider").slider({
											  range: true,
											  min: 0,
											  max: maxValue,
											  step: 0.1,
											  values: [0, maxValue],
											  slide: function (event, ui) {
															$("#minTablePer").val(ui.values[0]);
															$("#maxTablePer").val(ui.values[1]);
												}
									});

									$("#minTablePer").val(0);
									$("#maxTablePer").val(maxValue);

									  } catch (error) {
										// Handle any errors during the API request or slider setup
										console.error('Error fetching data: ', error);
										$('#filter-box #table-list').html('<p>Failed to load table ranges</p>');
									  }
							}
				async function GetDepthData() {
								try {
											// Fetching price data from the API
											const response = await $.ajax({
												  url: '@(SD.BaseApiUrl)/api/diamondproperty/get-depth-ranges', // API endpoint
											  method: 'GET', // GET request
											  dataType: 'json', // Expecting JSON response
											});

											// Ensure the response contains MaxPrice
											if (!response || typeof response.MaxValue !== 'number') {
											  throw new Error('Invalid response structure');
											}

												const maxValue = response.MaxValue;

											// Initialize the price slider
												$("#DepthPer-slider").slider({
											  range: true,
											  min: 0, // Minimum price is 0
												  max: maxValue, // Set maximum from API response
											  step: 0.1, // Step size for the slider
												  values: [0, maxValue], // Default values
											  slide: function (event, ui) {
												// Update the min and max price input fields dynamically
													$("#minDepthPer").val(ui.values[0]);
													$("#maxDepthPer").val(ui.values[1]);
											  }
											});

											// Set initial values for the price input fields
												$("#minDepthPer").val(0);
													$("#maxDepthPer").val(maxValue);

										  } catch (error) {
											// Handle any errors during the API request or slider setup
											console.error('Error fetching data: ', error);
												$('#filter-box #DepthPer-list').html('<p>Failed to load depth ranges</p>');
										  }
										}
				async function GetRatioData() {
						try {
							// Fetching data from API
							var response = await $.ajax({
									url: '@(SD.BaseApiUrl)/api/diamondproperty/get-ratio-list',
								method: 'GET',
								dataType: 'json',
							});

							// Extract color names
							const ratioList = response.map(item => item.Name);

							// Ensure that there's at least one color to avoid errors
							if (ratioList.length === 0) {
								console.warn('Not found ratio.');
								return;
							}

							// Calculate slider step as the index difference
							const StepCount = 1;

									$("#LWRatio-slider").slider({
								range: true,
								min: 0,
									max: ratioList.length - 1,
								step: StepCount,
								values: [0, ratioList.length - 1],
								slide: function (event, ui) {
									// Set the selected color values based on slider indices
										$("#minLWRatio").val(ratioList[ui.values[0]]);
												$("#maxLWRatio").val(ratioList[ui.values[1]]);
								}
							});

							// Set initial values for the min and max color fields
									$("#minLWRatio").val(ratioList[0]);
										$("#maxLWRatio").val(ratioList[ratioList.length - 1]);

						} catch (error) {
							console.error('Error fetching data: ', error);
									$('#filter-box #LWRatio-slider').html('<p>Failed to load Ratio</p>');
						}
					}
				async function GetPolishData() {
							try {
								// Fetching data from API
								var response = await $.ajax({
											url: '@(SD.BaseApiUrl)/api/diamondproperty/get-polish-list',
									method: 'GET',
									dataType: 'json',
								});

								// Extract color names
								const polishList = response.map(item => item.Name);

								// Ensure that there's at least one color to avoid errors
									if (polishList.length === 0) {
										console.warn('Not found polish.');
									return;
								}

								// Calculate slider step as the index difference
								const StepCount = 1;

								$("#Polish-slider").slider({
									range: true,
									min: 0,
									max: polishList.length - 1,
									step: StepCount,
									values: [0, polishList.length-1],
									slide: function (event, ui) {
										// Set the selected color values based on slider indices
											$("#minPolish").val(polishList[ui.values[0]]);
											$("#maxPolish").val(polishList[ui.values[1]]);
									}
								});

								// Set initial values for the min and max color fields
											$("#minPolish").val(polishList[0]);
											$("#maxPolish").val(polishList[polishList.length - 1]);

							} catch (error) {
								console.error('Error fetching data: ', error);
								$('#filter-box #Polish-slider').html('<p>Failed to load Polish</p>');
							}
						}
				async function GetFluorData() {
								try {
									// Fetching data from API
									var response = await $.ajax({
										url: '@(SD.BaseApiUrl)/api/diamondproperty/get-fluor-list',
										method: 'GET',
										dataType: 'json',
									});

									// Extract color names
									const fluorList = response.map(item => item.Name);

									// Ensure that there's at least one color to avoid errors
											if (fluorList.length === 0) {
											console.warn('Not found fluor.');
										return;
									}

									// Calculate slider step as the index difference
									const StepCount = 1;

									$("#Fluor-slider").slider({
										range: true,
										min: 0,
										max: fluorList.length - 1,
										step: StepCount,
										values: [0, fluorList.length-1],
										slide: function (event, ui) {
											// Set the selected color values based on slider indices
												$("#minFluor").val(fluorList[ui.values[0]]);
												$("#maxFluor").val(fluorList[ui.values[1]]);
										}
									});

									// Set initial values for the min and max color fields
													$("#minFluor").val(fluorList[0]);
													$("#maxFluor").val(fluorList[fluorList.length - 1]);

								} catch (error) {
									console.error('Error fetching data: ', error);
									$('#filter-box #Fluor-slider').html('<p>Failed to load fluor</p>');
								}
							}
				async function GetSymmetryData()
							{
									try {
										// Fetching data from API
										var response = await $.ajax({
											url: '@(SD.BaseApiUrl)/api/diamondproperty/get-symmetry-list',
											method: 'GET',
											dataType: 'json',
										});

										// Extract color names
										const symmetryList = response.map(item => item.Name);

										// Ensure that there's at least one color to avoid errors
										if (symmetryList.length === 0) {
												console.warn('Not found symmetry.');
												return;
										}

										// Calculate slider step as the index difference
										const StepCount = 1;

										$("#Symmetry-slider").slider({
											range: true,
											min: 0,
											max: symmetryList.length - 1,
											step: StepCount,
											values: [0, symmetryList.length-1],
											slide: function (event, ui)
											{
												// Set the selected color values based on slider indices
												$("#minSymmetry").val(symmetryList[ui.values[0]]);
												$("#maxSymmetry").val(symmetryList[ui.values[1]]);
											}
										});

										// Set initial values for the min and max color fields
											$("#minSymmetry").val(symmetryList[0]);
											$("#maxSymmetry").val(symmetryList[symmetryList.length - 1]);

									} catch (error) {
										console.error('Error fetching data: ', error);
										$('#filter-box #Symmetry-slider').html('<p>Failed to load symmetry</p>');
									}
							}

				async function getDiamondDataList(diamondFilters, pageNumber = 1, pageSize = 10) {
					debugger;
					return $.ajax({
						url: '/diamond/GetDiamondList', // Change this to your actual route
						type: 'POST',
						data: {
							diamondFilters: diamondFilters,
							pageNumber: pageNumber,
							pageSize: pageSize
						},
						success: function (data) {
							$('#diamond-list-container').html(data);
						},
						error: function (error) {
							console.error('Error fetching data:', error);
						}
					});
				}

				function ShowCertificate(certificate)
				{
					$.ajax({
						url: '@Url.Action("GetCertificate", "Diamond", new { diamondCerti = "__CERTIFICATE__" })'.replace('__CERTIFICATE__', certificate),
						type: 'GET',
						dataType: 'json',
						success: function(response) {
							$('#dimCertiModal').html(response);
							$('#dimCertiModal').modal('show');
						},
						error: function(xhr, status, error) {
							console.error('AJAX error:', status, error);
						}
					});
				}
	</script>
}
