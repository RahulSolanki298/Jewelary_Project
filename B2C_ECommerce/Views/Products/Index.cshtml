<!-- Product Section - Start -->
@{
    ViewBag.Title = "Products";
    @*<link rel="stylesheet" href="~/assets/css/products.css">*@
}
@using Common

<section>
    <div class="listingpage">
        <div class="home-giftbanner-main position-relative left-text-banner">
            <a href="#" aria-label="" class="d-block">
                <div class="ole-image-banner thumb text-center ">
                    <img src="~/assets/img/banner/filter-cover-image.jpg" class="filter-top-image" alt="" title="" />
                </div>
            </a>
        </div>
    </div>
</section>

<!-- breadcrumb area start -->
<div class="breadcrumb-area">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="breadcrumb-wrap">
                    <nav aria-label="breadcrumb">
                        <ul class="breadcrumb">
                            <li class="breadcrumb-item"><a href="index.html"><i class="fa fa-home"></i></a></li>
                            <li class="breadcrumb-item active" aria-current="page">Fine Jewelry</li>
                        </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- breadcrumb area end -->
<!-- page main wrapper start -->
<div class="shop-main-wrapper filter-padding">
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12 text-center">
                <h2>Fine Jewelry</h2>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12">
                <span style="float:right;font-size:20px;margin-bottom:10px;" id="filterOpen" class="pointer"><i class="fa fa-filter"></i> Filter</span>
            </div>
        </div>

        <div id="FilterSection" style="display:none;" class="product-shadow">
            <div class="top-bar">
                <div class="reset btn btn-dark text-capitalize" id="btnRestFilter" title="RESET">RESET</div>
                <div class="filterclose btn btn-danger text-capitalize" id="filterclose" title="CLOSE">✕</div>
            </div>
            <div class="Main-Header" id="ProductFilters">
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="shop-product-wrapper">
                    <!-- shop product top wrap start -->
                    <div class="shop-top-bar">
                        <div class="row align-items-center">
                            <div class="col-lg-7 col-md-6 order-2 order-md-1">
                                <div class="top-bar-left">
                                    <div class="product-view-mode">
                                        <a class="active" href="#" data-target="grid-view" data-bs-toggle="tooltip" title="Grid View"><i class="fa fa-th"></i></a>
                                        @*<a href="#" data-target="list-view" data-bs-toggle="tooltip" title="List View"><i class="fa fa-list"></i></a>*@
                                    </div>
                                    <div class="product-amount">
                                        <p>Showing 1–16 of 21 results</p>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-5 col-md-6 order-1 order-md-2">
                                <div class="top-bar-right">
                                    <div class="product-short">
                                        <p>Sort By : </p>
                                        <select class="nice-select" name="sortby">
                                            <option value="trending">Relevance</option>
                                            <option value="sales">Name (A - Z)</option>
                                            <option value="sales">Name (Z - A)</option>
                                            <option value="rating">Price (Low &gt; High)</option>
                                            <option value="date">Rating (Lowest)</option>
                                            <option value="price-asc">Model (A - Z)</option>
                                            <option value="price-asc">Model (Z - A)</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- shop product top wrap start -->
                    <!-- product item list wrapper start -->
                    <div id="loader-overlay">
                        <div class="text-center" id="txtLoader">
                            <img src="~/assets/loader/JF-WEB-LOADER.gif" style="width:100px;">
                        </div>
                    </div>
                    <div class="shop-product-wrap grid-view row mbn-30" id="MyProductsImg">
                    </div>
                    <!-- product item list wrapper end -->

                </div>
            </div>
        </div>
        <div class="row">
            <div class="row p-5">
                <div class="col-xl-12 text-center">
                    <button id="showMoreBtn" class="btn btn-dark text-capitalize">Show More</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @*<script src="assets/js/plugins/slick.min.js"></script>*@

    <script>
            var page = 1;
            var rangeVal = 10;

            const getValue = id => $(id).val() || '';
            const getArrayValue = id => $(id).val() || [];

            var filters = {
                Metals: getArrayValue('.metal-grp'),
                Shapes: getArrayValue('.shape-item'),
                FromPrice: getValue('#minPrice1'),
                ToPrice: getValue('#maxPrice1'),
                FromCarat: getValue('#minCarat'),
                ToCarat: getValue('#maxCarat'),
            };


            function showLoader() {
                $('#txtLoader').show(); // This shows the loader
            }

            function hideLoader() {
                $('#txtLoader').hide(); // This hides the loader
        }

        // Generic slider initializer
        function initSlider(selector, options) {
            $(selector).slider({
                range: true,
                ...options
            });
        }

            $(document).ready(function(){
                loadAllFunctions();

                //$("#minPrice").val("$" + $("#price-slider").slider("values", 0));
                //$("#maxPrice").val("$" + $("#price-slider").slider("values", 1));

                $("#filterclose").click(function () {
                    $("#FilterSection").hide();
                });

                $("#filterOpen").click(function () {
                    $("#FilterSection").show();
                });

                $("#btnViewDesign").click(function ()
                {
                    $("#FilterSection").hide();
                });

                // Shape button click
                $("#ProductFilters").on("click", ".shape-item", function () {
                    const shapeId = $(this).attr('shapeId');
                    $(this).toggleClass('shapeselected');

                    if ($(this).hasClass('shapeselected')) {
                        if (!filters.Shapes.includes(shapeId)) {
                            filters.Shapes.push(shapeId);
                        }
                    } else {
                        const index = filters.Shapes.indexOf(shapeId);
                        if (index !== -1) filters.Shapes.splice(index, 1);
                    }

                    GetProducts(filters, page, rangeVal);
                });

                $("#ProductFilters").on("change", ".metal-grp", function () {
                    const metalId = $(this).attr('metalId'); // Get the value of the checkbox (e.g., Diamond, Gemstone, etc.)

                    if ($(".metalcheckbox").is(":checked")) {
                        // Add the stone type to the filters if it's not already in the array (to avoid duplicates)
                        if (!filters.Metals.includes(metalId)) {
                            filters.Metals.push(metalId);
                        }
                    } else {
                        // If the checkbox is unchecked, remove the stone type from the array
                        const index = filters.Metals.indexOf(metalId);
                        if (index !== -1) {
                            filters.Metals.splice(index, 1);
                        }
                    }

                    console.log(filters); // Log the current state of filters to the console

                    // Call the GetProducts function to fetch the filtered products
                    GetProducts(filters, page, rangeVal);
                });

                // Price Slider
                initSlider("#ProductFilters #price-slider1", {
                    min: 500, max: 50000, step: 0.01, values: [5000, 30000],
                    slide: (e, ui) => {
                        $("#minPrice1").val("$" + ui.values[0]);
                        $("#maxPrice1").val("$" + ui.values[1]);
                    }
                });

                $("#carat-size-slider").slider({
                    range: true,
                    min: 0,  // Set minimum from API response
                    max: 50,  // Set maximum from API response
                    step: 0.1, // Adjust step size as needed
                    values: [0, 50], // Default values
                    slide: function (event, ui) {
                        debugger;
                        $("#minCarat").val(ui.values[0]);
                        $("#maxCarat").val(ui.values[1]);
                    }
                });

                // Set initial values
                $("#MyProductsImg").on("click", ".metalColor", function (event) {
                    //var t=$(this).val();

                    event.preventDefault();

                    debugger;
                    var productId = $(this).attr('productId');
                    var metalId = $(this).attr('metalid');

                    GetProductByColorId(productId, metalId);
                });
                ActivePriceSlider();

                //Rajs
                $("#minPrice1").val("$" + $("#price-slider1").slider("values", 0));
                $("#maxPrice1").val("$" + $("#price-slider1").slider("values", 1));

                $("#minCaratSize").val($("#carat-size-slider").slider("values", 0));
                $("#maxCaratSize").val($("#carat-size-slider").slider("values", 1));

            });

        function GetProductFilters()
            {
                    $.ajax({
                        url: '/Products/GetProductFilters',
                        type: 'GET',
                        dataType: 'html'
                    })
                    .done(function(response) {
                        $("#ProductFilters").html('');
                        $('#ProductFilters').html(response);
                    })
                    .fail(function(xhr, status, error) {
                        console.error('AJAX error:', status, error);
                    });
            }

        function ActivePriceSlider() {
            // Get initial min/max prices or fall back to defaults
            var minPrice = parseFloat($("#minPrice1").val()) || 0;
            var maxPrice = parseFloat($("#maxPrice1").val()) || 10000;

            // Ensure min is not greater than max
            if (minPrice > maxPrice) {
                [minPrice, maxPrice] = [0, 10000];
            }

            // Initialize Price Slider
            $("#price-slider1").slider({
                range: true,
                min: 0,
                max: 10000,
                step: 5,
                values: [minPrice, maxPrice],
                slide: function (event, ui) {
                    $("#minPrice1").val(ui.values[0]);
                    $("#maxPrice1").val(ui.values[1]);

                    getDiamondDataList({
                        FromPrice: ui.values[0],
                        ToPrice: ui.values[1]
                    });
                }
            });

            // Set values explicitly on input fields
            $("#minPrice1").val(minPrice);
            $("#maxPrice1").val(maxPrice);

            // Carat size slider
            var minCarat = parseFloat($("#minCarat").val()) || 0;
            var maxCarat = parseFloat($("#maxCarat").val()) || 5;

            if (minCarat > maxCarat) {
                [minCarat, maxCarat] = [0, 5];
            }

            $("#carat-size-slider").slider({
                range: true,
                min: 0,
                max: 5,
                step: 0.1,
                values: [minCarat, maxCarat],
                slide: function (event, ui) {
                    $("#minCarat").val(ui.values[0]);
                    $("#maxCarat").val(ui.values[1]);

                    getDiamondDataList({
                        MinCarat: ui.values[0],
                        MaxCarat: ui.values[1]
                    });
                }
            });

            // Set initial carat input values
            $("#minCarat").val(minCarat);
            $("#maxCarat").val(maxCarat);
        }


        async function GetProducts(filters, pageNumber = 1, pageSize = 10) {
                showLoader();
                return $.ajax({
                    url: '/Products/GetProductList', // Ensure this route matches your controller/action
                    type: 'POST',
                    data: {
                        filters: filters,  // Ensure this matches your action parameter name if model binding
                        pageNumber: pageNumber,
                        pageSize: pageSize
                    },
                    success: function (data) {
                        $('#MyProductsImg').html('');   // Clear existing content
                        $('#MyProductsImg').html(data); // Use 'data' instead of 'response'
                        hideLoader();
                    },
                    error: function (error) {
                        console.error('Error fetching data:', error);
                        hideLoader();
                    }
                });
            }

        async function loadAllFunctions() {
                    showLoader();
                    try {
                        await Promise.all([
                            GetProductFilters(),
                            ActivePriceSlider()
                        ]);
                        GetProducts(filters, page, rangeVal);
                    } catch (error) {
                        console.error("An error occurred while loading data:", error);
                    }
                    hideLoader();
                }

        function GetProductByColorId(productId, colorId) {
            $.ajax({
                url: '/Products/ProductDetailsByColorId',
                data: {
                    sku: productId,
                    colorId:parseInt(colorId)
                },
                type: 'GET',
                dataType: 'json'
            })
                .done(function (response) {
                    debugger;
                    const $productContainer = $(".product-item").has("[data-sku='" + productId + "']");
                    const baseUrl = '@SD.BaseApiUrl'.replace(/\\/g, '/');

                    console.log($(".activemetalname[data-sku='" + productId + "']"));
                    console.log($(".price-regular[data-sku='" + productId + "']"));
                    console.log($(".price-old[data-sku='" + productId + "']"));

                    $(".activemetalname[data-sku='" + productId + "']").text(response.colorName);

                    $(".price-regular[data-sku='" + productId + "']").text(response.Price);
                    $(".price-old[data-sku='" + productId + "']").html('<del>' + response.unitPrice + '</del>');

                    const images = (response.productImageVideos || []).filter(x => x.imageUrl && x.imageUrl !== "-");
                    if (images.length > 0) {
                        const priImg = baseUrl + '/' + images[0].imageUrl.replace(/\\/g, '/');
                        $productContainer.find('.pri-img').attr('src', priImg).attr('alt', response.colorName + ' - Primary Image');
                    }
                    if (images.length > 1) {
                        const secImg = baseUrl + '/' + images[1].imageUrl.replace(/\\/g, '/');
                        $productContainer.find('.sec-img').attr('src', secImg).attr('alt', response.colorName + ' - Secondary Image');
                    }

                })
                .fail(function (xhr, status, error) {
                    console.error('AJAX error:', status, error);
                });
        }

    </script>

}