@using Models
@inject AuthenticationService authenticationService

<EditForm Model="UserForAuthentication" OnValidSubmit="LoginUser">
	<DataAnnotationsValidator />
	<ValidationSummary />

	@if (ShowAuthenticationErrors)
	{
		<p class="text-center text-danger">@Errors</p>
	}

	<InputText @bind-Value="UserForAuthentication.Username" id="email" placeholder="Email..." class="form-control mb-2" />
	<ValidationMessage For="(()=>UserForAuthentication.Username)"></ValidationMessage>
	<InputText @bind-Value="UserForAuthentication.Password" type="password" placeholder="Password..." id="password" class="form-control mb-2" />
	<ValidationMessage For="(()=>UserForAuthentication.Password)"></ValidationMessage>

	@if (IsProcessing)
	{
		<button type="submit" class="btn bg3 text-white btn-block disabled"><i class="fas fa-sign-in-alt"></i> Please Wait...</button>
	}
	else
	{
		<button type="submit" class="btn bg3 text-white btn-block"> Sign in</button>
	}
</EditForm>




@code
{
	CustomerLoginDTO UserForAuthentication = new CustomerLoginDTO();
	public bool IsProcessing { get; set; } = false;
	public bool ShowAuthenticationErrors { get; set; }
	public string Errors { get; set; }
	public string ReturnUrl { get; set; }

	private async Task LoginUser()
	{
		IsProcessing = true;
		await authenticationService.SignInAsync(UserForAuthentication);
	}
}